// Code generated by "enumer -type=IpaType -json -sql -transform=snake -trimprefix=IpaType"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _IpaTypeName = "normalcrack"

var _IpaTypeIndex = [...]uint8{0, 6, 11}

const _IpaTypeLowerName = "normalcrack"

func (i IpaType) String() string {
	i -= 1
	if i < 0 || i >= IpaType(len(_IpaTypeIndex)-1) {
		return fmt.Sprintf("IpaType(%d)", i+1)
	}
	return _IpaTypeName[_IpaTypeIndex[i]:_IpaTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IpaTypeNoOp() {
	var x [1]struct{}
	_ = x[IpaTypeNormal-(1)]
	_ = x[IpaTypeCrack-(2)]
}

var _IpaTypeValues = []IpaType{IpaTypeNormal, IpaTypeCrack}

var _IpaTypeNameToValueMap = map[string]IpaType{
	_IpaTypeName[0:6]:       IpaTypeNormal,
	_IpaTypeLowerName[0:6]:  IpaTypeNormal,
	_IpaTypeName[6:11]:      IpaTypeCrack,
	_IpaTypeLowerName[6:11]: IpaTypeCrack,
}

var _IpaTypeNames = []string{
	_IpaTypeName[0:6],
	_IpaTypeName[6:11],
}

// IpaTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IpaTypeString(s string) (IpaType, error) {
	if val, ok := _IpaTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _IpaTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IpaType values", s)
}

// IpaTypeValues returns all values of the enum
func IpaTypeValues() []IpaType {
	return _IpaTypeValues
}

// IpaTypeStrings returns a slice of all String values of the enum
func IpaTypeStrings() []string {
	strs := make([]string, len(_IpaTypeNames))
	copy(strs, _IpaTypeNames)
	return strs
}

// IsAIpaType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IpaType) IsAIpaType() bool {
	for _, v := range _IpaTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IpaType
func (i IpaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IpaType
func (i *IpaType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IpaType should be a string, got %s", data)
	}

	var err error
	*i, err = IpaTypeString(s)
	return err
}

func (i IpaType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *IpaType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of IpaType: %[1]T(%[1]v)", value)
	}

	val, err := IpaTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
