// Code generated by "enumer -type=MemberSignIpaDownloadCountStatus -json -sql -transform=snake -trimprefix=MemberSignIpaDownloadCountStatus"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberSignIpaDownloadCountStatusName = "normalused"

var _MemberSignIpaDownloadCountStatusIndex = [...]uint8{0, 6, 10}

const _MemberSignIpaDownloadCountStatusLowerName = "normalused"

func (i MemberSignIpaDownloadCountStatus) String() string {
	i -= 1
	if i < 0 || i >= MemberSignIpaDownloadCountStatus(len(_MemberSignIpaDownloadCountStatusIndex)-1) {
		return fmt.Sprintf("MemberSignIpaDownloadCountStatus(%d)", i+1)
	}
	return _MemberSignIpaDownloadCountStatusName[_MemberSignIpaDownloadCountStatusIndex[i]:_MemberSignIpaDownloadCountStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberSignIpaDownloadCountStatusNoOp() {
	var x [1]struct{}
	_ = x[MemberSignIpaDownloadCountStatusNormal-(1)]
	_ = x[MemberSignIpaDownloadCountStatusUsed-(2)]
}

var _MemberSignIpaDownloadCountStatusValues = []MemberSignIpaDownloadCountStatus{MemberSignIpaDownloadCountStatusNormal, MemberSignIpaDownloadCountStatusUsed}

var _MemberSignIpaDownloadCountStatusNameToValueMap = map[string]MemberSignIpaDownloadCountStatus{
	_MemberSignIpaDownloadCountStatusName[0:6]:       MemberSignIpaDownloadCountStatusNormal,
	_MemberSignIpaDownloadCountStatusLowerName[0:6]:  MemberSignIpaDownloadCountStatusNormal,
	_MemberSignIpaDownloadCountStatusName[6:10]:      MemberSignIpaDownloadCountStatusUsed,
	_MemberSignIpaDownloadCountStatusLowerName[6:10]: MemberSignIpaDownloadCountStatusUsed,
}

var _MemberSignIpaDownloadCountStatusNames = []string{
	_MemberSignIpaDownloadCountStatusName[0:6],
	_MemberSignIpaDownloadCountStatusName[6:10],
}

// MemberSignIpaDownloadCountStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberSignIpaDownloadCountStatusString(s string) (MemberSignIpaDownloadCountStatus, error) {
	if val, ok := _MemberSignIpaDownloadCountStatusNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MemberSignIpaDownloadCountStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberSignIpaDownloadCountStatus values", s)
}

// MemberSignIpaDownloadCountStatusValues returns all values of the enum
func MemberSignIpaDownloadCountStatusValues() []MemberSignIpaDownloadCountStatus {
	return _MemberSignIpaDownloadCountStatusValues
}

// MemberSignIpaDownloadCountStatusStrings returns a slice of all String values of the enum
func MemberSignIpaDownloadCountStatusStrings() []string {
	strs := make([]string, len(_MemberSignIpaDownloadCountStatusNames))
	copy(strs, _MemberSignIpaDownloadCountStatusNames)
	return strs
}

// IsAMemberSignIpaDownloadCountStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberSignIpaDownloadCountStatus) IsAMemberSignIpaDownloadCountStatus() bool {
	for _, v := range _MemberSignIpaDownloadCountStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberSignIpaDownloadCountStatus
func (i MemberSignIpaDownloadCountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberSignIpaDownloadCountStatus
func (i *MemberSignIpaDownloadCountStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberSignIpaDownloadCountStatus should be a string, got %s", data)
	}

	var err error
	*i, err = MemberSignIpaDownloadCountStatusString(s)
	return err
}

func (i MemberSignIpaDownloadCountStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberSignIpaDownloadCountStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberSignIpaDownloadCountStatus: %[1]T(%[1]v)", value)
	}

	val, err := MemberSignIpaDownloadCountStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
