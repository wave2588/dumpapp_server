// Code generated by "enumer -type=MemberPayOrderStatus -json -sql -transform=snake -trimprefix=MemberPayOrderStatus"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberPayOrderStatusName = "pendingpaid"

var _MemberPayOrderStatusIndex = [...]uint8{0, 7, 11}

const _MemberPayOrderStatusLowerName = "pendingpaid"

func (i MemberPayOrderStatus) String() string {
	i -= 1
	if i < 0 || i >= MemberPayOrderStatus(len(_MemberPayOrderStatusIndex)-1) {
		return fmt.Sprintf("MemberPayOrderStatus(%d)", i+1)
	}
	return _MemberPayOrderStatusName[_MemberPayOrderStatusIndex[i]:_MemberPayOrderStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberPayOrderStatusNoOp() {
	var x [1]struct{}
	_ = x[MemberPayOrderStatusPending-(1)]
	_ = x[MemberPayOrderStatusPaid-(2)]
}

var _MemberPayOrderStatusValues = []MemberPayOrderStatus{MemberPayOrderStatusPending, MemberPayOrderStatusPaid}

var _MemberPayOrderStatusNameToValueMap = map[string]MemberPayOrderStatus{
	_MemberPayOrderStatusName[0:7]:       MemberPayOrderStatusPending,
	_MemberPayOrderStatusLowerName[0:7]:  MemberPayOrderStatusPending,
	_MemberPayOrderStatusName[7:11]:      MemberPayOrderStatusPaid,
	_MemberPayOrderStatusLowerName[7:11]: MemberPayOrderStatusPaid,
}

var _MemberPayOrderStatusNames = []string{
	_MemberPayOrderStatusName[0:7],
	_MemberPayOrderStatusName[7:11],
}

// MemberPayOrderStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberPayOrderStatusString(s string) (MemberPayOrderStatus, error) {
	if val, ok := _MemberPayOrderStatusNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MemberPayOrderStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberPayOrderStatus values", s)
}

// MemberPayOrderStatusValues returns all values of the enum
func MemberPayOrderStatusValues() []MemberPayOrderStatus {
	return _MemberPayOrderStatusValues
}

// MemberPayOrderStatusStrings returns a slice of all String values of the enum
func MemberPayOrderStatusStrings() []string {
	strs := make([]string, len(_MemberPayOrderStatusNames))
	copy(strs, _MemberPayOrderStatusNames)
	return strs
}

// IsAMemberPayOrderStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberPayOrderStatus) IsAMemberPayOrderStatus() bool {
	for _, v := range _MemberPayOrderStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberPayOrderStatus
func (i MemberPayOrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberPayOrderStatus
func (i *MemberPayOrderStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberPayOrderStatus should be a string, got %s", data)
	}

	var err error
	*i, err = MemberPayOrderStatusString(s)
	return err
}

func (i MemberPayOrderStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberPayOrderStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberPayOrderStatus: %[1]T(%[1]v)", value)
	}

	val, err := MemberPayOrderStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
