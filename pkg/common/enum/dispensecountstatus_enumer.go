// Code generated by "enumer -type=DispenseCountStatus -json -sql -transform=snake -trimprefix=DispenseCountStatus"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _DispenseCountStatusName = "normalused"

var _DispenseCountStatusIndex = [...]uint8{0, 6, 10}

const _DispenseCountStatusLowerName = "normalused"

func (i DispenseCountStatus) String() string {
	i -= 1
	if i < 0 || i >= DispenseCountStatus(len(_DispenseCountStatusIndex)-1) {
		return fmt.Sprintf("DispenseCountStatus(%d)", i+1)
	}
	return _DispenseCountStatusName[_DispenseCountStatusIndex[i]:_DispenseCountStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DispenseCountStatusNoOp() {
	var x [1]struct{}
	_ = x[DispenseCountStatusNormal-(1)]
	_ = x[DispenseCountStatusUsed-(2)]
}

var _DispenseCountStatusValues = []DispenseCountStatus{DispenseCountStatusNormal, DispenseCountStatusUsed}

var _DispenseCountStatusNameToValueMap = map[string]DispenseCountStatus{
	_DispenseCountStatusName[0:6]:       DispenseCountStatusNormal,
	_DispenseCountStatusLowerName[0:6]:  DispenseCountStatusNormal,
	_DispenseCountStatusName[6:10]:      DispenseCountStatusUsed,
	_DispenseCountStatusLowerName[6:10]: DispenseCountStatusUsed,
}

var _DispenseCountStatusNames = []string{
	_DispenseCountStatusName[0:6],
	_DispenseCountStatusName[6:10],
}

// DispenseCountStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DispenseCountStatusString(s string) (DispenseCountStatus, error) {
	if val, ok := _DispenseCountStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DispenseCountStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DispenseCountStatus values", s)
}

// DispenseCountStatusValues returns all values of the enum
func DispenseCountStatusValues() []DispenseCountStatus {
	return _DispenseCountStatusValues
}

// DispenseCountStatusStrings returns a slice of all String values of the enum
func DispenseCountStatusStrings() []string {
	strs := make([]string, len(_DispenseCountStatusNames))
	copy(strs, _DispenseCountStatusNames)
	return strs
}

// IsADispenseCountStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DispenseCountStatus) IsADispenseCountStatus() bool {
	for _, v := range _DispenseCountStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DispenseCountStatus
func (i DispenseCountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DispenseCountStatus
func (i *DispenseCountStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DispenseCountStatus should be a string, got %s", data)
	}

	var err error
	*i, err = DispenseCountStatusString(s)
	return err
}

func (i DispenseCountStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DispenseCountStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of DispenseCountStatus: %[1]T(%[1]v)", value)
	}

	val, err := DispenseCountStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
