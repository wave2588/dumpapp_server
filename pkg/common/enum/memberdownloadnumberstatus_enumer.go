// Code generated by "enumer -type=MemberDownloadNumberStatus -json -sql -transform=snake -trimprefix=MemberDownloadNumberStatus"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberDownloadNumberStatusName = "normalused"

var _MemberDownloadNumberStatusIndex = [...]uint8{0, 6, 10}

const _MemberDownloadNumberStatusLowerName = "normalused"

func (i MemberDownloadNumberStatus) String() string {
	i -= 1
	if i < 0 || i >= MemberDownloadNumberStatus(len(_MemberDownloadNumberStatusIndex)-1) {
		return fmt.Sprintf("MemberDownloadNumberStatus(%d)", i+1)
	}
	return _MemberDownloadNumberStatusName[_MemberDownloadNumberStatusIndex[i]:_MemberDownloadNumberStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberDownloadNumberStatusNoOp() {
	var x [1]struct{}
	_ = x[MemberDownloadNumberStatusNormal-(1)]
	_ = x[MemberDownloadNumberStatusUsed-(2)]
}

var _MemberDownloadNumberStatusValues = []MemberDownloadNumberStatus{MemberDownloadNumberStatusNormal, MemberDownloadNumberStatusUsed}

var _MemberDownloadNumberStatusNameToValueMap = map[string]MemberDownloadNumberStatus{
	_MemberDownloadNumberStatusName[0:6]:       MemberDownloadNumberStatusNormal,
	_MemberDownloadNumberStatusLowerName[0:6]:  MemberDownloadNumberStatusNormal,
	_MemberDownloadNumberStatusName[6:10]:      MemberDownloadNumberStatusUsed,
	_MemberDownloadNumberStatusLowerName[6:10]: MemberDownloadNumberStatusUsed,
}

var _MemberDownloadNumberStatusNames = []string{
	_MemberDownloadNumberStatusName[0:6],
	_MemberDownloadNumberStatusName[6:10],
}

// MemberDownloadNumberStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberDownloadNumberStatusString(s string) (MemberDownloadNumberStatus, error) {
	if val, ok := _MemberDownloadNumberStatusNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MemberDownloadNumberStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberDownloadNumberStatus values", s)
}

// MemberDownloadNumberStatusValues returns all values of the enum
func MemberDownloadNumberStatusValues() []MemberDownloadNumberStatus {
	return _MemberDownloadNumberStatusValues
}

// MemberDownloadNumberStatusStrings returns a slice of all String values of the enum
func MemberDownloadNumberStatusStrings() []string {
	strs := make([]string, len(_MemberDownloadNumberStatusNames))
	copy(strs, _MemberDownloadNumberStatusNames)
	return strs
}

// IsAMemberDownloadNumberStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberDownloadNumberStatus) IsAMemberDownloadNumberStatus() bool {
	for _, v := range _MemberDownloadNumberStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberDownloadNumberStatus
func (i MemberDownloadNumberStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberDownloadNumberStatus
func (i *MemberDownloadNumberStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberDownloadNumberStatus should be a string, got %s", data)
	}

	var err error
	*i, err = MemberDownloadNumberStatusString(s)
	return err
}

func (i MemberDownloadNumberStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberDownloadNumberStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberDownloadNumberStatus: %[1]T(%[1]v)", value)
	}

	val, err := MemberDownloadNumberStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
