// Code generated by "enumer -type=InstallAppCDKeyStatus -json -sql -transform=snake -trimprefix=InstallAppCDKeyStatus"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _InstallAppCDKeyStatusName = "normalusedadmin_delete"

var _InstallAppCDKeyStatusIndex = [...]uint8{0, 6, 10, 22}

const _InstallAppCDKeyStatusLowerName = "normalusedadmin_delete"

func (i InstallAppCDKeyStatus) String() string {
	i -= 1
	if i < 0 || i >= InstallAppCDKeyStatus(len(_InstallAppCDKeyStatusIndex)-1) {
		return fmt.Sprintf("InstallAppCDKeyStatus(%d)", i+1)
	}
	return _InstallAppCDKeyStatusName[_InstallAppCDKeyStatusIndex[i]:_InstallAppCDKeyStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InstallAppCDKeyStatusNoOp() {
	var x [1]struct{}
	_ = x[InstallAppCDKeyStatusNormal-(1)]
	_ = x[InstallAppCDKeyStatusUsed-(2)]
	_ = x[InstallAppCDKeyStatusAdminDelete-(3)]
}

var _InstallAppCDKeyStatusValues = []InstallAppCDKeyStatus{InstallAppCDKeyStatusNormal, InstallAppCDKeyStatusUsed, InstallAppCDKeyStatusAdminDelete}

var _InstallAppCDKeyStatusNameToValueMap = map[string]InstallAppCDKeyStatus{
	_InstallAppCDKeyStatusName[0:6]:        InstallAppCDKeyStatusNormal,
	_InstallAppCDKeyStatusLowerName[0:6]:   InstallAppCDKeyStatusNormal,
	_InstallAppCDKeyStatusName[6:10]:       InstallAppCDKeyStatusUsed,
	_InstallAppCDKeyStatusLowerName[6:10]:  InstallAppCDKeyStatusUsed,
	_InstallAppCDKeyStatusName[10:22]:      InstallAppCDKeyStatusAdminDelete,
	_InstallAppCDKeyStatusLowerName[10:22]: InstallAppCDKeyStatusAdminDelete,
}

var _InstallAppCDKeyStatusNames = []string{
	_InstallAppCDKeyStatusName[0:6],
	_InstallAppCDKeyStatusName[6:10],
	_InstallAppCDKeyStatusName[10:22],
}

// InstallAppCDKeyStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InstallAppCDKeyStatusString(s string) (InstallAppCDKeyStatus, error) {
	if val, ok := _InstallAppCDKeyStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InstallAppCDKeyStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InstallAppCDKeyStatus values", s)
}

// InstallAppCDKeyStatusValues returns all values of the enum
func InstallAppCDKeyStatusValues() []InstallAppCDKeyStatus {
	return _InstallAppCDKeyStatusValues
}

// InstallAppCDKeyStatusStrings returns a slice of all String values of the enum
func InstallAppCDKeyStatusStrings() []string {
	strs := make([]string, len(_InstallAppCDKeyStatusNames))
	copy(strs, _InstallAppCDKeyStatusNames)
	return strs
}

// IsAInstallAppCDKeyStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InstallAppCDKeyStatus) IsAInstallAppCDKeyStatus() bool {
	for _, v := range _InstallAppCDKeyStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for InstallAppCDKeyStatus
func (i InstallAppCDKeyStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for InstallAppCDKeyStatus
func (i *InstallAppCDKeyStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("InstallAppCDKeyStatus should be a string, got %s", data)
	}

	var err error
	*i, err = InstallAppCDKeyStatusString(s)
	return err
}

func (i InstallAppCDKeyStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *InstallAppCDKeyStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of InstallAppCDKeyStatus: %[1]T(%[1]v)", value)
	}

	val, err := InstallAppCDKeyStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
