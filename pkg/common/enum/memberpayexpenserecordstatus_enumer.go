// Code generated by "enumer -type=MemberPayExpenseRecordStatus -json -sql -transform=snake -trimprefix=MemberPayExpenseRecordStatus"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberPayExpenseRecordStatusName = "addreduce"

var _MemberPayExpenseRecordStatusIndex = [...]uint8{0, 3, 9}

const _MemberPayExpenseRecordStatusLowerName = "addreduce"

func (i MemberPayExpenseRecordStatus) String() string {
	i -= 1
	if i < 0 || i >= MemberPayExpenseRecordStatus(len(_MemberPayExpenseRecordStatusIndex)-1) {
		return fmt.Sprintf("MemberPayExpenseRecordStatus(%d)", i+1)
	}
	return _MemberPayExpenseRecordStatusName[_MemberPayExpenseRecordStatusIndex[i]:_MemberPayExpenseRecordStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberPayExpenseRecordStatusNoOp() {
	var x [1]struct{}
	_ = x[MemberPayExpenseRecordStatusAdd-(1)]
	_ = x[MemberPayExpenseRecordStatusReduce-(2)]
}

var _MemberPayExpenseRecordStatusValues = []MemberPayExpenseRecordStatus{MemberPayExpenseRecordStatusAdd, MemberPayExpenseRecordStatusReduce}

var _MemberPayExpenseRecordStatusNameToValueMap = map[string]MemberPayExpenseRecordStatus{
	_MemberPayExpenseRecordStatusName[0:3]:      MemberPayExpenseRecordStatusAdd,
	_MemberPayExpenseRecordStatusLowerName[0:3]: MemberPayExpenseRecordStatusAdd,
	_MemberPayExpenseRecordStatusName[3:9]:      MemberPayExpenseRecordStatusReduce,
	_MemberPayExpenseRecordStatusLowerName[3:9]: MemberPayExpenseRecordStatusReduce,
}

var _MemberPayExpenseRecordStatusNames = []string{
	_MemberPayExpenseRecordStatusName[0:3],
	_MemberPayExpenseRecordStatusName[3:9],
}

// MemberPayExpenseRecordStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberPayExpenseRecordStatusString(s string) (MemberPayExpenseRecordStatus, error) {
	if val, ok := _MemberPayExpenseRecordStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MemberPayExpenseRecordStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberPayExpenseRecordStatus values", s)
}

// MemberPayExpenseRecordStatusValues returns all values of the enum
func MemberPayExpenseRecordStatusValues() []MemberPayExpenseRecordStatus {
	return _MemberPayExpenseRecordStatusValues
}

// MemberPayExpenseRecordStatusStrings returns a slice of all String values of the enum
func MemberPayExpenseRecordStatusStrings() []string {
	strs := make([]string, len(_MemberPayExpenseRecordStatusNames))
	copy(strs, _MemberPayExpenseRecordStatusNames)
	return strs
}

// IsAMemberPayExpenseRecordStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberPayExpenseRecordStatus) IsAMemberPayExpenseRecordStatus() bool {
	for _, v := range _MemberPayExpenseRecordStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberPayExpenseRecordStatus
func (i MemberPayExpenseRecordStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberPayExpenseRecordStatus
func (i *MemberPayExpenseRecordStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberPayExpenseRecordStatus should be a string, got %s", data)
	}

	var err error
	*i, err = MemberPayExpenseRecordStatusString(s)
	return err
}

func (i MemberPayExpenseRecordStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberPayExpenseRecordStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberPayExpenseRecordStatus: %[1]T(%[1]v)", value)
	}

	val, err := MemberPayExpenseRecordStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
