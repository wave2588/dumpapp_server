// Code generated by "enumer -type=MemberPayCountUse -json -sql -transform=snake -trimprefix=MemberPayCountUse"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberPayCountUseName = "ipacertificateadmin_deletedispense"

var _MemberPayCountUseIndex = [...]uint8{0, 3, 14, 26, 34}

const _MemberPayCountUseLowerName = "ipacertificateadmin_deletedispense"

func (i MemberPayCountUse) String() string {
	i -= 1
	if i < 0 || i >= MemberPayCountUse(len(_MemberPayCountUseIndex)-1) {
		return fmt.Sprintf("MemberPayCountUse(%d)", i+1)
	}
	return _MemberPayCountUseName[_MemberPayCountUseIndex[i]:_MemberPayCountUseIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberPayCountUseNoOp() {
	var x [1]struct{}
	_ = x[MemberPayCountUseIpa-(1)]
	_ = x[MemberPayCountUseCertificate-(2)]
	_ = x[MemberPayCountUseAdminDelete-(3)]
	_ = x[MemberPayCountUseDispense-(4)]
}

var _MemberPayCountUseValues = []MemberPayCountUse{MemberPayCountUseIpa, MemberPayCountUseCertificate, MemberPayCountUseAdminDelete, MemberPayCountUseDispense}

var _MemberPayCountUseNameToValueMap = map[string]MemberPayCountUse{
	_MemberPayCountUseName[0:3]:        MemberPayCountUseIpa,
	_MemberPayCountUseLowerName[0:3]:   MemberPayCountUseIpa,
	_MemberPayCountUseName[3:14]:       MemberPayCountUseCertificate,
	_MemberPayCountUseLowerName[3:14]:  MemberPayCountUseCertificate,
	_MemberPayCountUseName[14:26]:      MemberPayCountUseAdminDelete,
	_MemberPayCountUseLowerName[14:26]: MemberPayCountUseAdminDelete,
	_MemberPayCountUseName[26:34]:      MemberPayCountUseDispense,
	_MemberPayCountUseLowerName[26:34]: MemberPayCountUseDispense,
}

var _MemberPayCountUseNames = []string{
	_MemberPayCountUseName[0:3],
	_MemberPayCountUseName[3:14],
	_MemberPayCountUseName[14:26],
	_MemberPayCountUseName[26:34],
}

// MemberPayCountUseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberPayCountUseString(s string) (MemberPayCountUse, error) {
	if val, ok := _MemberPayCountUseNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MemberPayCountUseNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberPayCountUse values", s)
}

// MemberPayCountUseValues returns all values of the enum
func MemberPayCountUseValues() []MemberPayCountUse {
	return _MemberPayCountUseValues
}

// MemberPayCountUseStrings returns a slice of all String values of the enum
func MemberPayCountUseStrings() []string {
	strs := make([]string, len(_MemberPayCountUseNames))
	copy(strs, _MemberPayCountUseNames)
	return strs
}

// IsAMemberPayCountUse returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberPayCountUse) IsAMemberPayCountUse() bool {
	for _, v := range _MemberPayCountUseValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberPayCountUse
func (i MemberPayCountUse) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberPayCountUse
func (i *MemberPayCountUse) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberPayCountUse should be a string, got %s", data)
	}

	var err error
	*i, err = MemberPayCountUseString(s)
	return err
}

func (i MemberPayCountUse) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberPayCountUse) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberPayCountUse: %[1]T(%[1]v)", value)
	}

	val, err := MemberPayCountUseString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
