// Code generated by "enumer -type=MemberPayCountSource -json -sql -transform=snake -trimprefix=MemberPayCountSource"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberPayCountSourceName = "normalpay_for_freeadmin_presentedinvited_presented"

var _MemberPayCountSourceIndex = [...]uint8{0, 6, 18, 33, 50}

const _MemberPayCountSourceLowerName = "normalpay_for_freeadmin_presentedinvited_presented"

func (i MemberPayCountSource) String() string {
	i -= 1
	if i < 0 || i >= MemberPayCountSource(len(_MemberPayCountSourceIndex)-1) {
		return fmt.Sprintf("MemberPayCountSource(%d)", i+1)
	}
	return _MemberPayCountSourceName[_MemberPayCountSourceIndex[i]:_MemberPayCountSourceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberPayCountSourceNoOp() {
	var x [1]struct{}
	_ = x[MemberPayCountSourceNormal-(1)]
	_ = x[MemberPayCountSourcePayForFree-(2)]
	_ = x[MemberPayCountSourceAdminPresented-(3)]
	_ = x[MemberPayCountSourceInvitedPresented-(4)]
}

var _MemberPayCountSourceValues = []MemberPayCountSource{MemberPayCountSourceNormal, MemberPayCountSourcePayForFree, MemberPayCountSourceAdminPresented, MemberPayCountSourceInvitedPresented}

var _MemberPayCountSourceNameToValueMap = map[string]MemberPayCountSource{
	_MemberPayCountSourceName[0:6]:        MemberPayCountSourceNormal,
	_MemberPayCountSourceLowerName[0:6]:   MemberPayCountSourceNormal,
	_MemberPayCountSourceName[6:18]:       MemberPayCountSourcePayForFree,
	_MemberPayCountSourceLowerName[6:18]:  MemberPayCountSourcePayForFree,
	_MemberPayCountSourceName[18:33]:      MemberPayCountSourceAdminPresented,
	_MemberPayCountSourceLowerName[18:33]: MemberPayCountSourceAdminPresented,
	_MemberPayCountSourceName[33:50]:      MemberPayCountSourceInvitedPresented,
	_MemberPayCountSourceLowerName[33:50]: MemberPayCountSourceInvitedPresented,
}

var _MemberPayCountSourceNames = []string{
	_MemberPayCountSourceName[0:6],
	_MemberPayCountSourceName[6:18],
	_MemberPayCountSourceName[18:33],
	_MemberPayCountSourceName[33:50],
}

// MemberPayCountSourceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberPayCountSourceString(s string) (MemberPayCountSource, error) {
	if val, ok := _MemberPayCountSourceNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MemberPayCountSourceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberPayCountSource values", s)
}

// MemberPayCountSourceValues returns all values of the enum
func MemberPayCountSourceValues() []MemberPayCountSource {
	return _MemberPayCountSourceValues
}

// MemberPayCountSourceStrings returns a slice of all String values of the enum
func MemberPayCountSourceStrings() []string {
	strs := make([]string, len(_MemberPayCountSourceNames))
	copy(strs, _MemberPayCountSourceNames)
	return strs
}

// IsAMemberPayCountSource returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberPayCountSource) IsAMemberPayCountSource() bool {
	for _, v := range _MemberPayCountSourceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberPayCountSource
func (i MemberPayCountSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberPayCountSource
func (i *MemberPayCountSource) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberPayCountSource should be a string, got %s", data)
	}

	var err error
	*i, err = MemberPayCountSourceString(s)
	return err
}

func (i MemberPayCountSource) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberPayCountSource) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberPayCountSource: %[1]T(%[1]v)", value)
	}

	val, err := MemberPayCountSourceString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
