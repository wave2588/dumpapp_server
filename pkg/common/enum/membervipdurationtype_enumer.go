// Code generated by "enumer -type=MemberVipDurationType -json -sql -transform=snake -trimprefix=MemberVipDurationType"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberVipDurationTypeName = "onetwothree"

var _MemberVipDurationTypeIndex = [...]uint8{0, 3, 6, 11}

const _MemberVipDurationTypeLowerName = "onetwothree"

func (i MemberVipDurationType) String() string {
	i -= 1
	if i < 0 || i >= MemberVipDurationType(len(_MemberVipDurationTypeIndex)-1) {
		return fmt.Sprintf("MemberVipDurationType(%d)", i+1)
	}
	return _MemberVipDurationTypeName[_MemberVipDurationTypeIndex[i]:_MemberVipDurationTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberVipDurationTypeNoOp() {
	var x [1]struct{}
	_ = x[MemberVipDurationTypeOne-(1)]
	_ = x[MemberVipDurationTypeTwo-(2)]
	_ = x[MemberVipDurationTypeThree-(3)]
}

var _MemberVipDurationTypeValues = []MemberVipDurationType{MemberVipDurationTypeOne, MemberVipDurationTypeTwo, MemberVipDurationTypeThree}

var _MemberVipDurationTypeNameToValueMap = map[string]MemberVipDurationType{
	_MemberVipDurationTypeName[0:3]:       MemberVipDurationTypeOne,
	_MemberVipDurationTypeLowerName[0:3]:  MemberVipDurationTypeOne,
	_MemberVipDurationTypeName[3:6]:       MemberVipDurationTypeTwo,
	_MemberVipDurationTypeLowerName[3:6]:  MemberVipDurationTypeTwo,
	_MemberVipDurationTypeName[6:11]:      MemberVipDurationTypeThree,
	_MemberVipDurationTypeLowerName[6:11]: MemberVipDurationTypeThree,
}

var _MemberVipDurationTypeNames = []string{
	_MemberVipDurationTypeName[0:3],
	_MemberVipDurationTypeName[3:6],
	_MemberVipDurationTypeName[6:11],
}

// MemberVipDurationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberVipDurationTypeString(s string) (MemberVipDurationType, error) {
	if val, ok := _MemberVipDurationTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MemberVipDurationTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberVipDurationType values", s)
}

// MemberVipDurationTypeValues returns all values of the enum
func MemberVipDurationTypeValues() []MemberVipDurationType {
	return _MemberVipDurationTypeValues
}

// MemberVipDurationTypeStrings returns a slice of all String values of the enum
func MemberVipDurationTypeStrings() []string {
	strs := make([]string, len(_MemberVipDurationTypeNames))
	copy(strs, _MemberVipDurationTypeNames)
	return strs
}

// IsAMemberVipDurationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberVipDurationType) IsAMemberVipDurationType() bool {
	for _, v := range _MemberVipDurationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberVipDurationType
func (i MemberVipDurationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberVipDurationType
func (i *MemberVipDurationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberVipDurationType should be a string, got %s", data)
	}

	var err error
	*i, err = MemberVipDurationTypeString(s)
	return err
}

func (i MemberVipDurationType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberVipDurationType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberVipDurationType: %[1]T(%[1]v)", value)
	}

	val, err := MemberVipDurationTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
