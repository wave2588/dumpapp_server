// Code generated by "enumer -type=AccountRole -json -sql -transform=snake -trimprefix=AccountRole"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _AccountRoleName = "noneinfluentialagent"

var _AccountRoleIndex = [...]uint8{0, 4, 15, 20}

const _AccountRoleLowerName = "noneinfluentialagent"

func (i AccountRole) String() string {
	i -= 1
	if i < 0 || i >= AccountRole(len(_AccountRoleIndex)-1) {
		return fmt.Sprintf("AccountRole(%d)", i+1)
	}
	return _AccountRoleName[_AccountRoleIndex[i]:_AccountRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccountRoleNoOp() {
	var x [1]struct{}
	_ = x[AccountRoleNone-(1)]
	_ = x[AccountRoleInfluential-(2)]
	_ = x[AccountRoleAgent-(3)]
}

var _AccountRoleValues = []AccountRole{AccountRoleNone, AccountRoleInfluential, AccountRoleAgent}

var _AccountRoleNameToValueMap = map[string]AccountRole{
	_AccountRoleName[0:4]:        AccountRoleNone,
	_AccountRoleLowerName[0:4]:   AccountRoleNone,
	_AccountRoleName[4:15]:       AccountRoleInfluential,
	_AccountRoleLowerName[4:15]:  AccountRoleInfluential,
	_AccountRoleName[15:20]:      AccountRoleAgent,
	_AccountRoleLowerName[15:20]: AccountRoleAgent,
}

var _AccountRoleNames = []string{
	_AccountRoleName[0:4],
	_AccountRoleName[4:15],
	_AccountRoleName[15:20],
}

// AccountRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccountRoleString(s string) (AccountRole, error) {
	if val, ok := _AccountRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccountRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccountRole values", s)
}

// AccountRoleValues returns all values of the enum
func AccountRoleValues() []AccountRole {
	return _AccountRoleValues
}

// AccountRoleStrings returns a slice of all String values of the enum
func AccountRoleStrings() []string {
	strs := make([]string, len(_AccountRoleNames))
	copy(strs, _AccountRoleNames)
	return strs
}

// IsAAccountRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccountRole) IsAAccountRole() bool {
	for _, v := range _AccountRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AccountRole
func (i AccountRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountRole
func (i *AccountRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AccountRole should be a string, got %s", data)
	}

	var err error
	*i, err = AccountRoleString(s)
	return err
}

func (i AccountRole) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AccountRole) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AccountRole: %[1]T(%[1]v)", value)
	}

	val, err := AccountRoleString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
