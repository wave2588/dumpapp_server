// Code generated by "enumer -type=MemberSignIpaDownloadCountRecordType -json -sql -transform=snake -trimprefix=MemberSignIpaDownloadCountRecordType"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberSignIpaDownloadCountRecordTypeName = "normaladmin_presentedadmin_deletedinstall_sign_ipa"

var _MemberSignIpaDownloadCountRecordTypeIndex = [...]uint8{0, 6, 21, 34, 50}

const _MemberSignIpaDownloadCountRecordTypeLowerName = "normaladmin_presentedadmin_deletedinstall_sign_ipa"

func (i MemberSignIpaDownloadCountRecordType) String() string {
	i -= 1
	if i < 0 || i >= MemberSignIpaDownloadCountRecordType(len(_MemberSignIpaDownloadCountRecordTypeIndex)-1) {
		return fmt.Sprintf("MemberSignIpaDownloadCountRecordType(%d)", i+1)
	}
	return _MemberSignIpaDownloadCountRecordTypeName[_MemberSignIpaDownloadCountRecordTypeIndex[i]:_MemberSignIpaDownloadCountRecordTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberSignIpaDownloadCountRecordTypeNoOp() {
	var x [1]struct{}
	_ = x[MemberSignIpaDownloadCountRecordTypeNormal-(1)]
	_ = x[MemberSignIpaDownloadCountRecordTypeAdminPresented-(2)]
	_ = x[MemberSignIpaDownloadCountRecordTypeAdminDeleted-(3)]
	_ = x[MemberSignIpaDownloadCountRecordTypeInstallSignIpa-(4)]
}

var _MemberSignIpaDownloadCountRecordTypeValues = []MemberSignIpaDownloadCountRecordType{MemberSignIpaDownloadCountRecordTypeNormal, MemberSignIpaDownloadCountRecordTypeAdminPresented, MemberSignIpaDownloadCountRecordTypeAdminDeleted, MemberSignIpaDownloadCountRecordTypeInstallSignIpa}

var _MemberSignIpaDownloadCountRecordTypeNameToValueMap = map[string]MemberSignIpaDownloadCountRecordType{
	_MemberSignIpaDownloadCountRecordTypeName[0:6]:        MemberSignIpaDownloadCountRecordTypeNormal,
	_MemberSignIpaDownloadCountRecordTypeLowerName[0:6]:   MemberSignIpaDownloadCountRecordTypeNormal,
	_MemberSignIpaDownloadCountRecordTypeName[6:21]:       MemberSignIpaDownloadCountRecordTypeAdminPresented,
	_MemberSignIpaDownloadCountRecordTypeLowerName[6:21]:  MemberSignIpaDownloadCountRecordTypeAdminPresented,
	_MemberSignIpaDownloadCountRecordTypeName[21:34]:      MemberSignIpaDownloadCountRecordTypeAdminDeleted,
	_MemberSignIpaDownloadCountRecordTypeLowerName[21:34]: MemberSignIpaDownloadCountRecordTypeAdminDeleted,
	_MemberSignIpaDownloadCountRecordTypeName[34:50]:      MemberSignIpaDownloadCountRecordTypeInstallSignIpa,
	_MemberSignIpaDownloadCountRecordTypeLowerName[34:50]: MemberSignIpaDownloadCountRecordTypeInstallSignIpa,
}

var _MemberSignIpaDownloadCountRecordTypeNames = []string{
	_MemberSignIpaDownloadCountRecordTypeName[0:6],
	_MemberSignIpaDownloadCountRecordTypeName[6:21],
	_MemberSignIpaDownloadCountRecordTypeName[21:34],
	_MemberSignIpaDownloadCountRecordTypeName[34:50],
}

// MemberSignIpaDownloadCountRecordTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberSignIpaDownloadCountRecordTypeString(s string) (MemberSignIpaDownloadCountRecordType, error) {
	if val, ok := _MemberSignIpaDownloadCountRecordTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MemberSignIpaDownloadCountRecordTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberSignIpaDownloadCountRecordType values", s)
}

// MemberSignIpaDownloadCountRecordTypeValues returns all values of the enum
func MemberSignIpaDownloadCountRecordTypeValues() []MemberSignIpaDownloadCountRecordType {
	return _MemberSignIpaDownloadCountRecordTypeValues
}

// MemberSignIpaDownloadCountRecordTypeStrings returns a slice of all String values of the enum
func MemberSignIpaDownloadCountRecordTypeStrings() []string {
	strs := make([]string, len(_MemberSignIpaDownloadCountRecordTypeNames))
	copy(strs, _MemberSignIpaDownloadCountRecordTypeNames)
	return strs
}

// IsAMemberSignIpaDownloadCountRecordType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberSignIpaDownloadCountRecordType) IsAMemberSignIpaDownloadCountRecordType() bool {
	for _, v := range _MemberSignIpaDownloadCountRecordTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberSignIpaDownloadCountRecordType
func (i MemberSignIpaDownloadCountRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberSignIpaDownloadCountRecordType
func (i *MemberSignIpaDownloadCountRecordType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberSignIpaDownloadCountRecordType should be a string, got %s", data)
	}

	var err error
	*i, err = MemberSignIpaDownloadCountRecordTypeString(s)
	return err
}

func (i MemberSignIpaDownloadCountRecordType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberSignIpaDownloadCountRecordType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberSignIpaDownloadCountRecordType: %[1]T(%[1]v)", value)
	}

	val, err := MemberSignIpaDownloadCountRecordTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
