// Code generated by "enumer -type=MemberPayCountStatus -json -sql -transform=snake -trimprefix=MemberPayCountStatus"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberPayCountStatusName = "normalusedadmin_delete"

var _MemberPayCountStatusIndex = [...]uint8{0, 6, 10, 22}

const _MemberPayCountStatusLowerName = "normalusedadmin_delete"

func (i MemberPayCountStatus) String() string {
	i -= 1
	if i < 0 || i >= MemberPayCountStatus(len(_MemberPayCountStatusIndex)-1) {
		return fmt.Sprintf("MemberPayCountStatus(%d)", i+1)
	}
	return _MemberPayCountStatusName[_MemberPayCountStatusIndex[i]:_MemberPayCountStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberPayCountStatusNoOp() {
	var x [1]struct{}
	_ = x[MemberPayCountStatusNormal-(1)]
	_ = x[MemberPayCountStatusUsed-(2)]
	_ = x[MemberPayCountStatusAdminDelete-(3)]
}

var _MemberPayCountStatusValues = []MemberPayCountStatus{MemberPayCountStatusNormal, MemberPayCountStatusUsed, MemberPayCountStatusAdminDelete}

var _MemberPayCountStatusNameToValueMap = map[string]MemberPayCountStatus{
	_MemberPayCountStatusName[0:6]:        MemberPayCountStatusNormal,
	_MemberPayCountStatusLowerName[0:6]:   MemberPayCountStatusNormal,
	_MemberPayCountStatusName[6:10]:       MemberPayCountStatusUsed,
	_MemberPayCountStatusLowerName[6:10]:  MemberPayCountStatusUsed,
	_MemberPayCountStatusName[10:22]:      MemberPayCountStatusAdminDelete,
	_MemberPayCountStatusLowerName[10:22]: MemberPayCountStatusAdminDelete,
}

var _MemberPayCountStatusNames = []string{
	_MemberPayCountStatusName[0:6],
	_MemberPayCountStatusName[6:10],
	_MemberPayCountStatusName[10:22],
}

// MemberPayCountStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberPayCountStatusString(s string) (MemberPayCountStatus, error) {
	if val, ok := _MemberPayCountStatusNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MemberPayCountStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberPayCountStatus values", s)
}

// MemberPayCountStatusValues returns all values of the enum
func MemberPayCountStatusValues() []MemberPayCountStatus {
	return _MemberPayCountStatusValues
}

// MemberPayCountStatusStrings returns a slice of all String values of the enum
func MemberPayCountStatusStrings() []string {
	strs := make([]string, len(_MemberPayCountStatusNames))
	copy(strs, _MemberPayCountStatusNames)
	return strs
}

// IsAMemberPayCountStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberPayCountStatus) IsAMemberPayCountStatus() bool {
	for _, v := range _MemberPayCountStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberPayCountStatus
func (i MemberPayCountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberPayCountStatus
func (i *MemberPayCountStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberPayCountStatus should be a string, got %s", data)
	}

	var err error
	*i, err = MemberPayCountStatusString(s)
	return err
}

func (i MemberPayCountStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberPayCountStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberPayCountStatus: %[1]T(%[1]v)", value)
	}

	val, err := MemberPayCountStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
