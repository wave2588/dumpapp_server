// Code generated by "enumer -type=MemberPayCountRecordType -json -sql -transform=snake -trimprefix=MemberPayCountRecordType"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberPayCountRecordTypeName = "paypay_for_freeadmin_presentedinvited_presentedrebatebuy_ipabuy_certificateadmin_deletedispense"

var _MemberPayCountRecordTypeIndex = [...]uint8{0, 3, 15, 30, 47, 53, 60, 75, 87, 95}

const _MemberPayCountRecordTypeLowerName = "paypay_for_freeadmin_presentedinvited_presentedrebatebuy_ipabuy_certificateadmin_deletedispense"

func (i MemberPayCountRecordType) String() string {
	i -= 1
	if i < 0 || i >= MemberPayCountRecordType(len(_MemberPayCountRecordTypeIndex)-1) {
		return fmt.Sprintf("MemberPayCountRecordType(%d)", i+1)
	}
	return _MemberPayCountRecordTypeName[_MemberPayCountRecordTypeIndex[i]:_MemberPayCountRecordTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberPayCountRecordTypeNoOp() {
	var x [1]struct{}
	_ = x[MemberPayCountRecordTypePay-(1)]
	_ = x[MemberPayCountRecordTypePayForFree-(2)]
	_ = x[MemberPayCountRecordTypeAdminPresented-(3)]
	_ = x[MemberPayCountRecordTypeInvitedPresented-(4)]
	_ = x[MemberPayCountRecordTypeRebate-(5)]
	_ = x[MemberPayCountRecordTypeBuyIpa-(6)]
	_ = x[MemberPayCountRecordTypeBuyCertificate-(7)]
	_ = x[MemberPayCountRecordTypeAdminDelete-(8)]
	_ = x[MemberPayCountRecordTypeDispense-(9)]
}

var _MemberPayCountRecordTypeValues = []MemberPayCountRecordType{MemberPayCountRecordTypePay, MemberPayCountRecordTypePayForFree, MemberPayCountRecordTypeAdminPresented, MemberPayCountRecordTypeInvitedPresented, MemberPayCountRecordTypeRebate, MemberPayCountRecordTypeBuyIpa, MemberPayCountRecordTypeBuyCertificate, MemberPayCountRecordTypeAdminDelete, MemberPayCountRecordTypeDispense}

var _MemberPayCountRecordTypeNameToValueMap = map[string]MemberPayCountRecordType{
	_MemberPayCountRecordTypeName[0:3]:        MemberPayCountRecordTypePay,
	_MemberPayCountRecordTypeLowerName[0:3]:   MemberPayCountRecordTypePay,
	_MemberPayCountRecordTypeName[3:15]:       MemberPayCountRecordTypePayForFree,
	_MemberPayCountRecordTypeLowerName[3:15]:  MemberPayCountRecordTypePayForFree,
	_MemberPayCountRecordTypeName[15:30]:      MemberPayCountRecordTypeAdminPresented,
	_MemberPayCountRecordTypeLowerName[15:30]: MemberPayCountRecordTypeAdminPresented,
	_MemberPayCountRecordTypeName[30:47]:      MemberPayCountRecordTypeInvitedPresented,
	_MemberPayCountRecordTypeLowerName[30:47]: MemberPayCountRecordTypeInvitedPresented,
	_MemberPayCountRecordTypeName[47:53]:      MemberPayCountRecordTypeRebate,
	_MemberPayCountRecordTypeLowerName[47:53]: MemberPayCountRecordTypeRebate,
	_MemberPayCountRecordTypeName[53:60]:      MemberPayCountRecordTypeBuyIpa,
	_MemberPayCountRecordTypeLowerName[53:60]: MemberPayCountRecordTypeBuyIpa,
	_MemberPayCountRecordTypeName[60:75]:      MemberPayCountRecordTypeBuyCertificate,
	_MemberPayCountRecordTypeLowerName[60:75]: MemberPayCountRecordTypeBuyCertificate,
	_MemberPayCountRecordTypeName[75:87]:      MemberPayCountRecordTypeAdminDelete,
	_MemberPayCountRecordTypeLowerName[75:87]: MemberPayCountRecordTypeAdminDelete,
	_MemberPayCountRecordTypeName[87:95]:      MemberPayCountRecordTypeDispense,
	_MemberPayCountRecordTypeLowerName[87:95]: MemberPayCountRecordTypeDispense,
}

var _MemberPayCountRecordTypeNames = []string{
	_MemberPayCountRecordTypeName[0:3],
	_MemberPayCountRecordTypeName[3:15],
	_MemberPayCountRecordTypeName[15:30],
	_MemberPayCountRecordTypeName[30:47],
	_MemberPayCountRecordTypeName[47:53],
	_MemberPayCountRecordTypeName[53:60],
	_MemberPayCountRecordTypeName[60:75],
	_MemberPayCountRecordTypeName[75:87],
	_MemberPayCountRecordTypeName[87:95],
}

// MemberPayCountRecordTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberPayCountRecordTypeString(s string) (MemberPayCountRecordType, error) {
	if val, ok := _MemberPayCountRecordTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MemberPayCountRecordTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberPayCountRecordType values", s)
}

// MemberPayCountRecordTypeValues returns all values of the enum
func MemberPayCountRecordTypeValues() []MemberPayCountRecordType {
	return _MemberPayCountRecordTypeValues
}

// MemberPayCountRecordTypeStrings returns a slice of all String values of the enum
func MemberPayCountRecordTypeStrings() []string {
	strs := make([]string, len(_MemberPayCountRecordTypeNames))
	copy(strs, _MemberPayCountRecordTypeNames)
	return strs
}

// IsAMemberPayCountRecordType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberPayCountRecordType) IsAMemberPayCountRecordType() bool {
	for _, v := range _MemberPayCountRecordTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberPayCountRecordType
func (i MemberPayCountRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberPayCountRecordType
func (i *MemberPayCountRecordType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberPayCountRecordType should be a string, got %s", data)
	}

	var err error
	*i, err = MemberPayCountRecordTypeString(s)
	return err
}

func (i MemberPayCountRecordType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberPayCountRecordType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberPayCountRecordType: %[1]T(%[1]v)", value)
	}

	val, err := MemberPayCountRecordTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
