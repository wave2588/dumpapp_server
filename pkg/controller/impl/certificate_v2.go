package impl

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"dumpapp_server/pkg/common/constant"
	"dumpapp_server/pkg/common/enum"
	util2 "dumpapp_server/pkg/common/util"
	"dumpapp_server/pkg/config"
	"dumpapp_server/pkg/controller"
	"dumpapp_server/pkg/dao"
	"dumpapp_server/pkg/dao/impl"
	"dumpapp_server/pkg/util"
)

type CertificateV2Controller struct {
	certificateDAO  dao.CertificateV2DAO
	memberDeviceDAO dao.MemberDeviceDAO
}

var DefaultCertificateV2Controller controller.CertificateController

func init() {
	DefaultCertificateV2Controller = NewCertificateV2Controller()
}

func NewCertificateV2Controller() *CertificateV2Controller {
	return &CertificateV2Controller{
		certificateDAO:  impl.DefaultCertificateV2DAO,
		memberDeviceDAO: impl.DefaultMemberDeviceDAO,
	}
}

type createResponse struct {
	Code int64       `json:"code"` ///
	Msg  string      `json:"msg"`  /// 添加成功
	Data interface{} `json:"data"`
}

type createDataResponse struct {
	ID                 string `json:"id"` /// 设备 id
	CertificateContent string `json:"certificateContent"`
	ProfileContent     string `json:"profileContent"`
}

func (c *CertificateV2Controller) CreateCer(ctx context.Context, UDID, regionPool string) *controller.CertificateResponse {
	/// regionPool 1 是私有 2 和 3 是共有
	res := &controller.CertificateResponse{}

	endpoint := config.DumpConfig.AppConfig.CerCreateURLV2
	requestBodyMap := map[string]interface{}{
		"token": config.DumpConfig.AppConfig.CerServerTokenV2,
		"udid":  UDID,
		"type":  1,
	}
	requestBody, _ := json.Marshal(requestBodyMap)
	body, err := util.HttpRequestV2("POST", endpoint, map[string]string{
		"Content-Type": "application/json",
	}, bytes.NewBuffer(requestBody))
	if err != nil {
		res.ErrorMessage = util2.StringPtr("v2 cer server fail")
		return res
	}
	fmt.Println(string(body))

	//body := `{"code":1,"msg":"\u6dfb\u52a0\u6210\u529f","data":{"id":"9205","certificateContent":"MIIFsTCCBJmgAwIBAgIQCKTJva67a8Y+XIy8OoVfRjANBgkqhkiG9w0BAQsFADB1MUQwQgYDVQQDDDtBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9ucyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTELMAkGA1UECwwCRzMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTIyMDYyMDE0NDY0OFoXDTIzMDYyMDE0NDY0N1owgYwxGjAYBgoJkiaJk\/IsZAEBDApDRDRCVFhQRlFUMTYwNAYDVQQDDC1pUGhvbmUgRGlzdHJpYnV0aW9uOiBUaW5ndGluZyBTdSAoQ0Q0QlRYUEZRVCkxEzARBgNVBAsMCkNENEJUWFBGUVQxFDASBgNVBAoMC1Rpbmd0aW5nIFN1MQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMLQzRDXPCJ7YBHtEBScTUCxWYJ3Q1hgtKwDvA7SkR5lEVRnmFumCaQOeic7UMOi9Y+bLXlpjWfbzIQWNFWwMyh5KdOKWtqUXMXCk5P\/y5e14EhVb1HoKyz70\/UQg3x1rDTYeF6Lq7EFKtkRLfmgqFWs87snufvjeGNkMDlyJA\/zaX9bvtxANcYGmm\/sEezJShMMJZkOhc6\/eQvIT0PmkWAyiiY1feL0OHExaAIQ5qFF5rNiBr6Siz5EteOGJWIP9dzSKOyg0G+hGAhWoCPyXpVqSfJOz\/I+0E6GrNJwD6KZaxFSa4NEhcGopJZYmDvwecyfjw7TCUCv1rY7U\/jTr80CAwEAAaOCAiMwggIfMAwGA1UdEwEB\/wQCMAAwHwYDVR0jBBgwFoAUCf7AFZD5r2QKkhK5JihjDJfsp7IwcAYIKwYBBQUHAQEEZDBiMC0GCCsGAQUFBzAChiFodHRwOi8vY2VydHMuYXBwbGUuY29tL3d3ZHJnMy5kZXIwMQYIKwYBBQUHMAGGJWh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDMtd3dkcmczMDIwggEeBgNVHSAEggEVMIIBETCCAQ0GCSqGSIb3Y2QFATCB\/zCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA3BggrBgEFBQcCARYraHR0cHM6Ly93d3cuYXBwbGUuY29tL2NlcnRpZmljYXRlYXV0aG9yaXR5LzAWBgNVHSUBAf8EDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUJsWjDPxVErrdotyJ1zJxBnt28b8wDgYDVR0PAQH\/BAQDAgeAMBMGCiqGSIb3Y2QGAQQBAf8EAgUAMA0GCSqGSIb3DQEBCwUAA4IBAQCAAu04ua69Xa3DJEeGz+SqVnjLBQjveSEv9pi2E+L2mkJim9KQy3DGOuHHIaeSGJq4\/YU\/Jx6py0V06Gk3uSZfMjF815iI\/exhTISp9TTnq+oXdnlILZC0IgKdxDj0hKIHAbTPWYB8015CbawHYK\/5GQRkO+q\/vgs\/4NJUz8btqQAMvLd9XRAV9k0n9bqpAJDgniEoVwkq0b+xI6pb8Ss2ITOPgpBVPSHnx8pB37TE7wTShydyOqPN5piAxRCMKoOBHTS3G3E6t6sQolbePn5wfncL+MfnMl94\/e9ZaEZJ8VZphKlQUt1l7NdXk3gNCmqv\/TjecsLPLNKRAFrrV\/Gl","profileContent":"MIIvUQYJKoZIhvcNAQcCoIIvQjCCLz4CAQExCzAJBgUrDgMCGgUAMIIfXgYJKoZIhvcNAQcBoIIfTwSCH0s8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI\\/iGHtlmNJhWjwwJDt+CXHpPH6\/adTDYhhZwzGKe3fmIrUR40eYt+edjrmqYYGzkPE4TchPrAQl0kecqeboVINgAFq7QCM\/IBFtvOMt4aNhPI8\/4LBC37\/vQBh41JaEef8EcsdSnNh7h+08nAQI2xCJe10uIJm7q\/L9VQFo8C60bUJ3z3QEYi50VrObOQOwIjHdCr5CbGHd8qnThepeUial+8pMkcFnDooPi1TyOiFO7QIDAQABo4HlMIHiMAwGA1UdEwEB\/wQCMAAwHwYDVR0jBBgwFoAUb\/GVGGJc4Mjxxe1sGMng02RSmCAwQAYIKwYBBQUHAQEENDAyMDAGCCsGAQUFBzABhiRodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDAzLWFpcGNhMDcwLwYDVR0fBCgwJjAkoCKgIIYeaHR0cDovL2NybC5hcHBsZS5jb20vYWlwY2EuY3JsMB0GA1UdDgQWBBRuqPK1KTk5L9f2j4aq1Ia3DmLXPDAOBgNVHQ8BAf8EBAMCB4AwDwYJKoZIhvdjZAY6BAIFADANBgkqhkiG9w0BAQsFAAOCAQEAraCEPzWc+wYnSGKfKKqmYINigx0vXEdpJxLabUjSr4vfgBeaDqTMtgpSMOXaKCkq+y9GJ7BOv5spvYJs3+ml5b87nRjMxAAq1XjGGfGCh3P+UL4HVDQCK4tnQO9FWUZP2sTGLUiHTFUIdLNwwQYsJrVPrp0KPznCVr\/3lwX9OfWSsQywwuLF1EmzNDR2oat8pATyS4U5A193WtxyLNkpBOSmkfJ3G9sFEQfhJSfANGfeeixrTLzBF+x9J29tKiUxgaPb4xlYLKFPR2Al3SEC\/hbVx9R4ZEqML4UxaFc8OvXdW5roAnuB66cWnqMXfaYGzjxGrBFESqmraKSkSDw4kzCCBEQwggMsoAMCAQICCFxjyuRKN1PJMA0GCSqGSIb3DQEBCwUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTAeFw0xNzA1MTAyMTI3MzBaFw0zMDEyMzEwMDAwMDBaMHMxLTArBgNVBAMMJEFwcGxlIGlQaG9uZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEgMB4GA1UECwwXQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyUVqAQ8+gwSGx\/y\/3F7wHoHuFzBzYyYu3j16JM2TPk85R7p1vvPA0vFZoqsf\/gqGPNktmgfyDmu5KZEaXyIKi\/FyWAWuTEtExXmngDywiOCMDCeEXRnlhxk2y+PFdrew9EFyUfQFXINLom2mUbjxJt97Xq1lDMaymFGMu30bTMFOyAjH0u1kC7TdG41PQH0bj0iWklvz0Jh+2bykGQ6ZYbtBXQHMW3d6fSTQ3NNT\/8PcxZQstlpNjhgjOb3ZxlI+0fL0JYqhKof92AxGKVH\/7RdsiSVrh7+KaRSfd5\/DFbdos4hFvYTmBgJBZA+tKii4FcngrKeKunIENLJ4jPiyhQIDAQABo4HsMIHpMA8GA1UdEwEB\/wQFMAMBAf8wHwYDVR0jBBgwFoAUK9BpR5R2Cf70a40uQKb3R01\/CF4wRAYIKwYBBQUHAQEEODA2MDQGCCsGAQUFBzABhihodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDAzLWFwcGxlcm9vdGNhMC4GA1UdHwQnMCUwI6AhoB+GHWh0dHA6Ly9jcmwuYXBwbGUuY29tL3Jvb3QuY3JsMB0GA1UdDgQWBBRv8ZUYYlzgyPHF7WwYyeDTZFKYIDAOBgNVHQ8BAf8EBAMCAQYwEAYKKoZIhvdjZAYCEgQCBQAwDQYJKoZIhvcNAQELBQADggEBADrPrJiNvpIgIQmtlfOxXCH6Ni1XIER0c2SSCLOWrPdtl\/pbNDgnzxJG0zwR8AfJmZCx0egRCaXjpWtsYwg\/niX61ZmcTOblzo6yTWjsi6ujok+KERU+3BQrHMZEtm9nxVtPlSkth1w\/3IMed0\/t2lSnLecTgcFjxFQLG0sKaigiCNQ3knx\/Zyhfrz0\/t6xZHTg0ZFruM0oZQkQpxMoYa+HBUy0t9E3CFfYzMhh48SZvik3rlEyj6P8PswOLZdrrLthlUJ\/cn4rfMaiEVNxSUkHSshMdMUZHiF8+7sPyjCMEleusij6CbAafLuOLQ5piWzQN9JnPLO66coYZI6X8jrUwggS7MIIDo6ADAgECAgECMA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTAeFw0wNjA0MjUyMTQwMzZaFw0zNTAyMDkyMTQwMzZaMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOSRqQkfkdseR1DrBe1eeYQt6zaiV0xV7IsZid75S2z1B6siMALoGD74UAnTf0GomPnRymacJGsR0KO75Bsqwx+VnnoMpEeLW9QWNzPLxA9NzhRp0ckZcvVdDtV\/X5vyJQO6VY9NXQ3xZDUjFUsVWR2zlPf2nJ7PULrBWFBnjwi0IPfLrCwgb3C2PwEwjLdDzw+dPfMrSSgayP7OtbkO2V4c1ss9tTqt9A8OAJILsSEWLnTVPA3bYharo3GSR1NVwa8vQbP4++NwzeajTEV+H0xrUJZBicR0YgsQg0GHM4qBsTBY7FoEMoxos48d3mVz\/2deZbxJ2HafMxRloXeUyS0CAwEAAaOCAXowggF2MA4GA1UdDwEB\/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH\/MB0GA1UdDgQWBBQr0GlHlHYJ\/vRrjS5ApvdHTX8IXjAfBgNVHSMEGDAWgBQr0GlHlHYJ\/vRrjS5ApvdHTX8IXjCCAREGA1UdIASCAQgwggEEMIIBAAYJKoZIhvdjZAUBMIHyMCoGCCsGAQUFBwIBFh5odHRwczovL3d3dy5hcHBsZS5jb20vYXBwbGVjYS8wgcMGCCsGAQUFBwICMIG2GoGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wDQYJKoZIhvcNAQEFBQADggEBAFw2mUwteLftjJvc83eb8nbSdzBPwR+Fg4UbmT1HN\/Kpm0COLNSxkBLYvvRzm+7SZA\/LeU802KI++Xj\/a8gH7H05g4tTINM4xLG\/mk8Ka\/8r\/FmnBQl8F0BWER5007eLIztHo9VvJOLr0bdw3w9F4SfK8W147ee1Fxeo3H4iNcol1dkP1mvUoiQjEfehrI9zgWDGG1sJL5Ky+ERI8GA4nhX1PSZnIIozavcNgs\/e66Mv+VNqW2TAYzN39zoHLFbr2g8hDtq6cxlPtdk2f8GHVdmnmbkyQvvY1XGefqFStxu9k0IkEirHDx22TZxeY8hLgBdQqorV2uT80AkHN7B1dSExggKFMIICgQIBATB\/MHMxLTArBgNVBAMMJEFwcGxlIGlQaG9uZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEgMB4GA1UECwwXQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTAghj5xwhnRqTJzAJBgUrDgMCGgUAoIHcMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTIyMDYyMTEyNDY0MFowIwYJKoZIhvcNAQkEMRYEFGn5d6IY9wUAIw8vDTt2LE2y3i27MCkGCSqGSIb3DQEJNDEcMBowCQYFKw4DAhoFAKENBgkqhkiG9w0BAQEFADBSBgkqhkiG9w0BCQ8xRTBDMAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIAgDANBggqhkiG9w0DAgIBQDAHBgUrDgMCBzANBggqhkiG9w0DAgIBKDANBgkqhkiG9w0BAQEFAASCAQA3pqYkdAPkG7wdLcROoOIQmrwLEfxNROSiUVDDucktYEpqbXfJtd8bAjWuiuSoSCwBKwxyjrRSaGJ3dtk7yb6y6pzu1WgxCFcQUAGWYkDwas+OUgxLYBaXEbURYAnA89Du9AyGo8Ze8ibFcY93YgR9jjBtjQsDuev+FqMUhgNHB1w1yNV4X+DRmWm2DAs\/1LKcrLh9hxsyOEYGUlGp6943qOgXxl5AKSE5X3L8OOYfrLyyZWbXJTATNq7q6nwuQM201c6DiDqA5bTr8LXdXuV5DCO6fZVOsuyxYpPvNSNKfRJlwfqjKDYw+d9+R8UDVa3hJ4f3KtnAU6IMzVb4u7ZE"}}
	//`

	var response *createResponse
	err = json.Unmarshal([]byte(body), &response)
	if err != nil {
		res.ErrorMessage = util2.StringPtr("v2 response body json.unmarshal fail")
		return res
	}
	if response.Code != 1 {
		res.ErrorMessage = util2.StringPtr(fmt.Sprintf("v2 cer server error：%s", response.Msg))
		return res
	}
	d, err := json.Marshal(response.Data)
	if err != nil {
		res.ErrorMessage = util2.StringPtr("v2 json.Marshal(response.Data) fail")
		return res
	}
	var responseData *createDataResponse
	err = json.Unmarshal(d, &responseData)
	if err != nil {
		res.ErrorMessage = util2.StringPtr("v2 responseData json.Unmarshal fail")
		return res
	}

	cerData := c.getCerByServer(ctx, responseData.ID)
	if cerData.ErrorMessage != nil {
		res.ErrorMessage = cerData.ErrorMessage
		return res
	}
	return &controller.CertificateResponse{
		P12Data:             cerData.Data.P12,
		MobileProvisionData: cerData.Data.Mobileprovision,
		Source:              enum.CertificateSourceV2,
		BizExt: &constant.CertificateBizExt{
			V2DeviceID:          responseData.ID,
			OriginalP12Password: cerData.Data.Password,
			NewP12Password:      "123",
		},
	}
}

type getCerResponse struct {
	Code int                 `json:"code"`
	Msg  string              `json:"msg"`
	Data *getCerDataResponse `json:"data"`

	ErrorMessage *string `json:"error_message"`
}

type getCerDataResponse struct {
	Mobileprovision string `json:"mobileprovision"` /// 描述文件 base64 位编码
	P12             string `json:"p12"`             /// p12文件 base64 位编码内容
	Password        string `json:"password"`        /// 证书密码
	AppleDeviceID   string `json:"deviceId"`        /// 苹果平台设备 ID
}

func (c *CertificateV2Controller) getCerByServer(ctx context.Context, id string) *getCerResponse {
	res := &getCerResponse{}
	endpoint := config.DumpConfig.AppConfig.CerGetV2
	requestBodyMap := map[string]interface{}{
		"token": config.DumpConfig.AppConfig.CerServerTokenV2,
		"page":  1,
		"id":    id,
	}
	requestBody, _ := json.Marshal(requestBodyMap)
	body, err := util.HttpRequestV2("POST", endpoint, map[string]string{
		"Content-Type": "application/json",
	}, bytes.NewBuffer(requestBody))
	if err != nil {
		res.ErrorMessage = util2.StringPtr(fmt.Sprintf("v2 get_cer_by_server fail.  id: %s", id))
		return res
	}
	err = json.Unmarshal(body, &res)
	if err != nil {
		res.ErrorMessage = util2.StringPtr(fmt.Sprintf("v2 get_cer_by_server json.Unmarshal fail.  id: %s", id))
		return res
	}
	if res.Code != 1 {
		res.ErrorMessage = util2.StringPtr(fmt.Sprintf("v2 get_cer_by_server code != 1.  id: %s", id))
		return res
	}
	return res
}

func (c *CertificateV2Controller) CheckCerIsActive(ctx context.Context, certificateID int64) (bool, error) {
	cerMap, err := c.certificateDAO.BatchGet(ctx, []int64{certificateID})
	if err != nil {
		return false, err
	}
	cer, ok := cerMap[certificateID]
	if !ok {
		return false, nil
	}

	var cerBizExt *constant.CertificateBizExt
	err = json.Unmarshal([]byte(cer.BizExt), &cerBizExt)
	if err != nil {
		return false, err
	}

	memberDeviceMap, err := c.memberDeviceDAO.BatchGet(ctx, []int64{cer.DeviceID})
	if err != nil {
		return false, err
	}
	memberDevice, ok := memberDeviceMap[cer.DeviceID]
	if !ok {
		return false, nil
	}

	response, err := c.getCertificates(ctx, memberDevice.Udid)
	if err != nil {
		return false, err
	}

	/// 为请求成功默认证书无效
	if response.Code != 1 {
		return false, nil
	}

	/// 因为根据一个 udid 能拿到一批证书，所以需要遍历一下。
	isActive := false
	for _, datum := range response.Data {
		if datum.ID == cerBizExt.V2DeviceID && datum.Status == 1 {
			isActive = true
		}
	}

	return isActive, nil
}

type getDeviceListResponse struct {
	Code int                      `json:"code"` /// 1 代表请求成功
	Data []*getDeviceDataResponse `json:"data"`
}

type getDeviceDataResponse struct {
	ID     string `json:"id"`     /// id
	Status int    `json:"status"` /// 证书是否有效，1 为有效
}

func (c *CertificateV2Controller) getCertificates(ctx context.Context, UDID string) (*getDeviceListResponse, error) {
	endpoint := config.DumpConfig.AppConfig.CerGetDeviceListV2
	requestBodyMap := map[string]interface{}{
		"token": config.DumpConfig.AppConfig.CerServerTokenV2,
		"udid":  UDID,
	}
	requestBody, _ := json.Marshal(requestBodyMap)
	body, err := util.HttpRequestV2("POST", endpoint, map[string]string{
		"Content-Type": "application/json",
	}, bytes.NewBuffer(requestBody))
	if err != nil {
		return nil, err
	}

	var response getDeviceListResponse
	err = json.Unmarshal(body, &response)
	if err != nil {
		return nil, err
	}
	return &response, nil
}
