// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"dumpapp_server/pkg/common/enum"
	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InstallAppCdkey is an object representing the database table.
type InstallAppCdkey struct {
	ID            int64                      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OutID         string                     `boil:"out_id" json:"out_id" toml:"out_id" yaml:"out_id"`
	Status        enum.InstallAppCDKeyStatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	CertificateID int64                      `boil:"certificate_id" json:"certificate_id" toml:"certificate_id" yaml:"certificate_id"`
	OrderID       int64                      `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	CreatedAt     time.Time                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time                  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *installAppCdkeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L installAppCdkeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstallAppCdkeyColumns = struct {
	ID            string
	OutID         string
	Status        string
	CertificateID string
	OrderID       string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	OutID:         "out_id",
	Status:        "status",
	CertificateID: "certificate_id",
	OrderID:       "order_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var InstallAppCdkeyTableColumns = struct {
	ID            string
	OutID         string
	Status        string
	CertificateID string
	OrderID       string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "install_app_cdkey.id",
	OutID:         "install_app_cdkey.out_id",
	Status:        "install_app_cdkey.status",
	CertificateID: "install_app_cdkey.certificate_id",
	OrderID:       "install_app_cdkey.order_id",
	CreatedAt:     "install_app_cdkey.created_at",
	UpdatedAt:     "install_app_cdkey.updated_at",
}

// Generated where

type whereHelperenum_InstallAppCDKeyStatus struct{ field string }

func (w whereHelperenum_InstallAppCDKeyStatus) EQ(x enum.InstallAppCDKeyStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperenum_InstallAppCDKeyStatus) NEQ(x enum.InstallAppCDKeyStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperenum_InstallAppCDKeyStatus) LT(x enum.InstallAppCDKeyStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperenum_InstallAppCDKeyStatus) LTE(x enum.InstallAppCDKeyStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperenum_InstallAppCDKeyStatus) GT(x enum.InstallAppCDKeyStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperenum_InstallAppCDKeyStatus) GTE(x enum.InstallAppCDKeyStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InstallAppCdkeyWhere = struct {
	ID            whereHelperint64
	OutID         whereHelperstring
	Status        whereHelperenum_InstallAppCDKeyStatus
	CertificateID whereHelperint64
	OrderID       whereHelperint64
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "`install_app_cdkey`.`id`"},
	OutID:         whereHelperstring{field: "`install_app_cdkey`.`out_id`"},
	Status:        whereHelperenum_InstallAppCDKeyStatus{field: "`install_app_cdkey`.`status`"},
	CertificateID: whereHelperint64{field: "`install_app_cdkey`.`certificate_id`"},
	OrderID:       whereHelperint64{field: "`install_app_cdkey`.`order_id`"},
	CreatedAt:     whereHelpertime_Time{field: "`install_app_cdkey`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`install_app_cdkey`.`updated_at`"},
}

// InstallAppCdkeyRels is where relationship names are stored.
var InstallAppCdkeyRels = struct {
}{}

// installAppCdkeyR is where relationships are stored.
type installAppCdkeyR struct {
}

// NewStruct creates a new relationship struct
func (*installAppCdkeyR) NewStruct() *installAppCdkeyR {
	return &installAppCdkeyR{}
}

// installAppCdkeyL is where Load methods for each relationship are stored.
type installAppCdkeyL struct{}

var (
	installAppCdkeyAllColumns            = []string{"id", "out_id", "status", "certificate_id", "order_id", "created_at", "updated_at"}
	installAppCdkeyColumnsWithoutDefault = []string{"out_id", "status", "order_id"}
	installAppCdkeyColumnsWithDefault    = []string{"id", "certificate_id", "created_at", "updated_at"}
	installAppCdkeyPrimaryKeyColumns     = []string{"id"}
	installAppCdkeyGeneratedColumns      = []string{}
)

type (
	// InstallAppCdkeySlice is an alias for a slice of pointers to InstallAppCdkey.
	// This should almost always be used instead of []InstallAppCdkey.
	InstallAppCdkeySlice []*InstallAppCdkey
	// InstallAppCdkeyHook is the signature for custom InstallAppCdkey hook methods
	InstallAppCdkeyHook func(context.Context, boil.ContextExecutor, *InstallAppCdkey) error

	installAppCdkeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	installAppCdkeyType                 = reflect.TypeOf(&InstallAppCdkey{})
	installAppCdkeyMapping              = queries.MakeStructMapping(installAppCdkeyType)
	installAppCdkeyPrimaryKeyMapping, _ = queries.BindMapping(installAppCdkeyType, installAppCdkeyMapping, installAppCdkeyPrimaryKeyColumns)
	installAppCdkeyInsertCacheMut       sync.RWMutex
	installAppCdkeyInsertCache          = make(map[string]insertCache)
	installAppCdkeyUpdateCacheMut       sync.RWMutex
	installAppCdkeyUpdateCache          = make(map[string]updateCache)
	installAppCdkeyUpsertCacheMut       sync.RWMutex
	installAppCdkeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var installAppCdkeyAfterSelectHooks []InstallAppCdkeyHook

var installAppCdkeyBeforeInsertHooks []InstallAppCdkeyHook
var installAppCdkeyAfterInsertHooks []InstallAppCdkeyHook

var installAppCdkeyBeforeUpdateHooks []InstallAppCdkeyHook
var installAppCdkeyAfterUpdateHooks []InstallAppCdkeyHook

var installAppCdkeyBeforeDeleteHooks []InstallAppCdkeyHook
var installAppCdkeyAfterDeleteHooks []InstallAppCdkeyHook

var installAppCdkeyBeforeUpsertHooks []InstallAppCdkeyHook
var installAppCdkeyAfterUpsertHooks []InstallAppCdkeyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstallAppCdkey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstallAppCdkey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstallAppCdkey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstallAppCdkey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstallAppCdkey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstallAppCdkey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstallAppCdkey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstallAppCdkey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstallAppCdkey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstallAppCdkeyHook registers your hook function for all future operations.
func AddInstallAppCdkeyHook(hookPoint boil.HookPoint, installAppCdkeyHook InstallAppCdkeyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		installAppCdkeyAfterSelectHooks = append(installAppCdkeyAfterSelectHooks, installAppCdkeyHook)
	case boil.BeforeInsertHook:
		installAppCdkeyBeforeInsertHooks = append(installAppCdkeyBeforeInsertHooks, installAppCdkeyHook)
	case boil.AfterInsertHook:
		installAppCdkeyAfterInsertHooks = append(installAppCdkeyAfterInsertHooks, installAppCdkeyHook)
	case boil.BeforeUpdateHook:
		installAppCdkeyBeforeUpdateHooks = append(installAppCdkeyBeforeUpdateHooks, installAppCdkeyHook)
	case boil.AfterUpdateHook:
		installAppCdkeyAfterUpdateHooks = append(installAppCdkeyAfterUpdateHooks, installAppCdkeyHook)
	case boil.BeforeDeleteHook:
		installAppCdkeyBeforeDeleteHooks = append(installAppCdkeyBeforeDeleteHooks, installAppCdkeyHook)
	case boil.AfterDeleteHook:
		installAppCdkeyAfterDeleteHooks = append(installAppCdkeyAfterDeleteHooks, installAppCdkeyHook)
	case boil.BeforeUpsertHook:
		installAppCdkeyBeforeUpsertHooks = append(installAppCdkeyBeforeUpsertHooks, installAppCdkeyHook)
	case boil.AfterUpsertHook:
		installAppCdkeyAfterUpsertHooks = append(installAppCdkeyAfterUpsertHooks, installAppCdkeyHook)
	}
}

// One returns a single installAppCdkey record from the query.
func (q installAppCdkeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InstallAppCdkey, error) {
	o := &InstallAppCdkey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for install_app_cdkey")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InstallAppCdkey records from the query.
func (q installAppCdkeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstallAppCdkeySlice, error) {
	var o []*InstallAppCdkey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstallAppCdkey slice")
	}

	if len(installAppCdkeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InstallAppCdkey records in the query.
func (q installAppCdkeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count install_app_cdkey rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q installAppCdkeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if install_app_cdkey exists")
	}

	return count > 0, nil
}

// InstallAppCdkeys retrieves all the records using an executor.
func InstallAppCdkeys(mods ...qm.QueryMod) installAppCdkeyQuery {
	mods = append(mods, qm.From("`install_app_cdkey`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`install_app_cdkey`.*"})
	}

	return installAppCdkeyQuery{q}
}

// FindInstallAppCdkey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstallAppCdkey(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*InstallAppCdkey, error) {
	installAppCdkeyObj := &InstallAppCdkey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `install_app_cdkey` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, installAppCdkeyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from install_app_cdkey")
	}

	if err = installAppCdkeyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return installAppCdkeyObj, err
	}

	return installAppCdkeyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InstallAppCdkey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no install_app_cdkey provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(installAppCdkeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	installAppCdkeyInsertCacheMut.RLock()
	cache, cached := installAppCdkeyInsertCache[key]
	installAppCdkeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			installAppCdkeyAllColumns,
			installAppCdkeyColumnsWithDefault,
			installAppCdkeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(installAppCdkeyType, installAppCdkeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(installAppCdkeyType, installAppCdkeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `install_app_cdkey` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `install_app_cdkey` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `install_app_cdkey` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, installAppCdkeyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into install_app_cdkey")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == installAppCdkeyMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for install_app_cdkey")
	}

CacheNoHooks:
	if !cached {
		installAppCdkeyInsertCacheMut.Lock()
		installAppCdkeyInsertCache[key] = cache
		installAppCdkeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InstallAppCdkey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InstallAppCdkey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	installAppCdkeyUpdateCacheMut.RLock()
	cache, cached := installAppCdkeyUpdateCache[key]
	installAppCdkeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			installAppCdkeyAllColumns,
			installAppCdkeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update install_app_cdkey, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `install_app_cdkey` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, installAppCdkeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(installAppCdkeyType, installAppCdkeyMapping, append(wl, installAppCdkeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update install_app_cdkey row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for install_app_cdkey")
	}

	if !cached {
		installAppCdkeyUpdateCacheMut.Lock()
		installAppCdkeyUpdateCache[key] = cache
		installAppCdkeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q installAppCdkeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for install_app_cdkey")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for install_app_cdkey")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstallAppCdkeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installAppCdkeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `install_app_cdkey` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, installAppCdkeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in installAppCdkey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all installAppCdkey")
	}
	return rowsAff, nil
}

var mySQLInstallAppCdkeyUniqueColumns = []string{
	"id",
	"out_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InstallAppCdkey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no install_app_cdkey provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(installAppCdkeyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInstallAppCdkeyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	installAppCdkeyUpsertCacheMut.RLock()
	cache, cached := installAppCdkeyUpsertCache[key]
	installAppCdkeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			installAppCdkeyAllColumns,
			installAppCdkeyColumnsWithDefault,
			installAppCdkeyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			installAppCdkeyAllColumns,
			installAppCdkeyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert install_app_cdkey, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`install_app_cdkey`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `install_app_cdkey` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(installAppCdkeyType, installAppCdkeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(installAppCdkeyType, installAppCdkeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for install_app_cdkey")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == installAppCdkeyMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(installAppCdkeyType, installAppCdkeyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for install_app_cdkey")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for install_app_cdkey")
	}

CacheNoHooks:
	if !cached {
		installAppCdkeyUpsertCacheMut.Lock()
		installAppCdkeyUpsertCache[key] = cache
		installAppCdkeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InstallAppCdkey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstallAppCdkey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InstallAppCdkey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), installAppCdkeyPrimaryKeyMapping)
	sql := "DELETE FROM `install_app_cdkey` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from install_app_cdkey")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for install_app_cdkey")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q installAppCdkeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no installAppCdkeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from install_app_cdkey")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for install_app_cdkey")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstallAppCdkeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(installAppCdkeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installAppCdkeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `install_app_cdkey` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, installAppCdkeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from installAppCdkey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for install_app_cdkey")
	}

	if len(installAppCdkeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstallAppCdkey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstallAppCdkey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstallAppCdkeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstallAppCdkeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installAppCdkeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `install_app_cdkey`.* FROM `install_app_cdkey` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, installAppCdkeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstallAppCdkeySlice")
	}

	*o = slice

	return nil
}

// InstallAppCdkeyExists checks if the InstallAppCdkey row exists.
func InstallAppCdkeyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `install_app_cdkey` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if install_app_cdkey exists")
	}

	return exists, nil
}

// Exists checks if the InstallAppCdkey row exists.
func (o *InstallAppCdkey) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InstallAppCdkeyExists(ctx, exec, o.ID)
}
