// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"dumpapp_server/pkg/common/datatype"
	"dumpapp_server/pkg/common/enum"
	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MemberPayExpenseRecord is an object representing the database table.
type MemberPayExpenseRecord struct {
	ID        int64                                 `boil:"id" json:"id,string" toml:"id" yaml:"id"`
	MemberID  int64                                 `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	Status    enum.MemberPayExpenseRecordStatus     `boil:"status" json:"status" toml:"status" yaml:"status"`
	Count     int64                                 `boil:"count" json:"count" toml:"count" yaml:"count"`
	BizExt    datatype.MemberPayExpenseRecordBizExt `boil:"biz_ext" json:"biz_ext" toml:"biz_ext" yaml:"biz_ext"`
	CreatedAt time.Time                             `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time                             `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *memberPayExpenseRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberPayExpenseRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberPayExpenseRecordColumns = struct {
	ID        string
	MemberID  string
	Status    string
	Count     string
	BizExt    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	MemberID:  "member_id",
	Status:    "status",
	Count:     "count",
	BizExt:    "biz_ext",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperenum_MemberPayExpenseRecordStatus struct{ field string }

func (w whereHelperenum_MemberPayExpenseRecordStatus) EQ(x enum.MemberPayExpenseRecordStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperenum_MemberPayExpenseRecordStatus) NEQ(x enum.MemberPayExpenseRecordStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperenum_MemberPayExpenseRecordStatus) LT(x enum.MemberPayExpenseRecordStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperenum_MemberPayExpenseRecordStatus) LTE(x enum.MemberPayExpenseRecordStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperenum_MemberPayExpenseRecordStatus) GT(x enum.MemberPayExpenseRecordStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperenum_MemberPayExpenseRecordStatus) GTE(x enum.MemberPayExpenseRecordStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperdatatype_MemberPayExpenseRecordBizExt struct{ field string }

func (w whereHelperdatatype_MemberPayExpenseRecordBizExt) EQ(x datatype.MemberPayExpenseRecordBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdatatype_MemberPayExpenseRecordBizExt) NEQ(x datatype.MemberPayExpenseRecordBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdatatype_MemberPayExpenseRecordBizExt) LT(x datatype.MemberPayExpenseRecordBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdatatype_MemberPayExpenseRecordBizExt) LTE(x datatype.MemberPayExpenseRecordBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdatatype_MemberPayExpenseRecordBizExt) GT(x datatype.MemberPayExpenseRecordBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdatatype_MemberPayExpenseRecordBizExt) GTE(x datatype.MemberPayExpenseRecordBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MemberPayExpenseRecordWhere = struct {
	ID        whereHelperint64
	MemberID  whereHelperint64
	Status    whereHelperenum_MemberPayExpenseRecordStatus
	Count     whereHelperint64
	BizExt    whereHelperdatatype_MemberPayExpenseRecordBizExt
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`member_pay_expense_record`.`id`"},
	MemberID:  whereHelperint64{field: "`member_pay_expense_record`.`member_id`"},
	Status:    whereHelperenum_MemberPayExpenseRecordStatus{field: "`member_pay_expense_record`.`status`"},
	Count:     whereHelperint64{field: "`member_pay_expense_record`.`count`"},
	BizExt:    whereHelperdatatype_MemberPayExpenseRecordBizExt{field: "`member_pay_expense_record`.`biz_ext`"},
	CreatedAt: whereHelpertime_Time{field: "`member_pay_expense_record`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`member_pay_expense_record`.`updated_at`"},
}

// MemberPayExpenseRecordRels is where relationship names are stored.
var MemberPayExpenseRecordRels = struct {
}{}

// memberPayExpenseRecordR is where relationships are stored.
type memberPayExpenseRecordR struct {
}

// NewStruct creates a new relationship struct
func (*memberPayExpenseRecordR) NewStruct() *memberPayExpenseRecordR {
	return &memberPayExpenseRecordR{}
}

// memberPayExpenseRecordL is where Load methods for each relationship are stored.
type memberPayExpenseRecordL struct{}

var (
	memberPayExpenseRecordAllColumns            = []string{"id", "member_id", "status", "count", "biz_ext", "created_at", "updated_at"}
	memberPayExpenseRecordColumnsWithoutDefault = []string{"member_id", "status", "count", "biz_ext"}
	memberPayExpenseRecordColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	memberPayExpenseRecordPrimaryKeyColumns     = []string{"id"}
)

type (
	// MemberPayExpenseRecordSlice is an alias for a slice of pointers to MemberPayExpenseRecord.
	// This should almost always be used instead of []MemberPayExpenseRecord.
	MemberPayExpenseRecordSlice []*MemberPayExpenseRecord
	// MemberPayExpenseRecordHook is the signature for custom MemberPayExpenseRecord hook methods
	MemberPayExpenseRecordHook func(context.Context, boil.ContextExecutor, *MemberPayExpenseRecord) error

	memberPayExpenseRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberPayExpenseRecordType                 = reflect.TypeOf(&MemberPayExpenseRecord{})
	memberPayExpenseRecordMapping              = queries.MakeStructMapping(memberPayExpenseRecordType)
	memberPayExpenseRecordPrimaryKeyMapping, _ = queries.BindMapping(memberPayExpenseRecordType, memberPayExpenseRecordMapping, memberPayExpenseRecordPrimaryKeyColumns)
	memberPayExpenseRecordInsertCacheMut       sync.RWMutex
	memberPayExpenseRecordInsertCache          = make(map[string]insertCache)
	memberPayExpenseRecordUpdateCacheMut       sync.RWMutex
	memberPayExpenseRecordUpdateCache          = make(map[string]updateCache)
	memberPayExpenseRecordUpsertCacheMut       sync.RWMutex
	memberPayExpenseRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberPayExpenseRecordBeforeInsertHooks []MemberPayExpenseRecordHook
var memberPayExpenseRecordBeforeUpdateHooks []MemberPayExpenseRecordHook
var memberPayExpenseRecordBeforeDeleteHooks []MemberPayExpenseRecordHook
var memberPayExpenseRecordBeforeUpsertHooks []MemberPayExpenseRecordHook

var memberPayExpenseRecordAfterInsertHooks []MemberPayExpenseRecordHook
var memberPayExpenseRecordAfterSelectHooks []MemberPayExpenseRecordHook
var memberPayExpenseRecordAfterUpdateHooks []MemberPayExpenseRecordHook
var memberPayExpenseRecordAfterDeleteHooks []MemberPayExpenseRecordHook
var memberPayExpenseRecordAfterUpsertHooks []MemberPayExpenseRecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MemberPayExpenseRecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MemberPayExpenseRecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MemberPayExpenseRecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MemberPayExpenseRecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MemberPayExpenseRecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MemberPayExpenseRecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MemberPayExpenseRecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MemberPayExpenseRecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MemberPayExpenseRecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberPayExpenseRecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberPayExpenseRecordHook registers your hook function for all future operations.
func AddMemberPayExpenseRecordHook(hookPoint boil.HookPoint, memberPayExpenseRecordHook MemberPayExpenseRecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		memberPayExpenseRecordBeforeInsertHooks = append(memberPayExpenseRecordBeforeInsertHooks, memberPayExpenseRecordHook)
	case boil.BeforeUpdateHook:
		memberPayExpenseRecordBeforeUpdateHooks = append(memberPayExpenseRecordBeforeUpdateHooks, memberPayExpenseRecordHook)
	case boil.BeforeDeleteHook:
		memberPayExpenseRecordBeforeDeleteHooks = append(memberPayExpenseRecordBeforeDeleteHooks, memberPayExpenseRecordHook)
	case boil.BeforeUpsertHook:
		memberPayExpenseRecordBeforeUpsertHooks = append(memberPayExpenseRecordBeforeUpsertHooks, memberPayExpenseRecordHook)
	case boil.AfterInsertHook:
		memberPayExpenseRecordAfterInsertHooks = append(memberPayExpenseRecordAfterInsertHooks, memberPayExpenseRecordHook)
	case boil.AfterSelectHook:
		memberPayExpenseRecordAfterSelectHooks = append(memberPayExpenseRecordAfterSelectHooks, memberPayExpenseRecordHook)
	case boil.AfterUpdateHook:
		memberPayExpenseRecordAfterUpdateHooks = append(memberPayExpenseRecordAfterUpdateHooks, memberPayExpenseRecordHook)
	case boil.AfterDeleteHook:
		memberPayExpenseRecordAfterDeleteHooks = append(memberPayExpenseRecordAfterDeleteHooks, memberPayExpenseRecordHook)
	case boil.AfterUpsertHook:
		memberPayExpenseRecordAfterUpsertHooks = append(memberPayExpenseRecordAfterUpsertHooks, memberPayExpenseRecordHook)
	}
}

// One returns a single memberPayExpenseRecord record from the query.
func (q memberPayExpenseRecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MemberPayExpenseRecord, error) {
	o := &MemberPayExpenseRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for member_pay_expense_record")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MemberPayExpenseRecord records from the query.
func (q memberPayExpenseRecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberPayExpenseRecordSlice, error) {
	var o []*MemberPayExpenseRecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MemberPayExpenseRecord slice")
	}

	if len(memberPayExpenseRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MemberPayExpenseRecord records in the query.
func (q memberPayExpenseRecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count member_pay_expense_record rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memberPayExpenseRecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if member_pay_expense_record exists")
	}

	return count > 0, nil
}

// MemberPayExpenseRecords retrieves all the records using an executor.
func MemberPayExpenseRecords(mods ...qm.QueryMod) memberPayExpenseRecordQuery {
	mods = append(mods, qm.From("`member_pay_expense_record`"))
	return memberPayExpenseRecordQuery{NewQuery(mods...)}
}

// FindMemberPayExpenseRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMemberPayExpenseRecord(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MemberPayExpenseRecord, error) {
	memberPayExpenseRecordObj := &MemberPayExpenseRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `member_pay_expense_record` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, memberPayExpenseRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from member_pay_expense_record")
	}

	if err = memberPayExpenseRecordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memberPayExpenseRecordObj, err
	}

	return memberPayExpenseRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MemberPayExpenseRecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_pay_expense_record provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberPayExpenseRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberPayExpenseRecordInsertCacheMut.RLock()
	cache, cached := memberPayExpenseRecordInsertCache[key]
	memberPayExpenseRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberPayExpenseRecordAllColumns,
			memberPayExpenseRecordColumnsWithDefault,
			memberPayExpenseRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberPayExpenseRecordType, memberPayExpenseRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberPayExpenseRecordType, memberPayExpenseRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `member_pay_expense_record` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `member_pay_expense_record` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `member_pay_expense_record` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, memberPayExpenseRecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into member_pay_expense_record")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberPayExpenseRecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_pay_expense_record")
	}

CacheNoHooks:
	if !cached {
		memberPayExpenseRecordInsertCacheMut.Lock()
		memberPayExpenseRecordInsertCache[key] = cache
		memberPayExpenseRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MemberPayExpenseRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MemberPayExpenseRecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberPayExpenseRecordUpdateCacheMut.RLock()
	cache, cached := memberPayExpenseRecordUpdateCache[key]
	memberPayExpenseRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberPayExpenseRecordAllColumns,
			memberPayExpenseRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update member_pay_expense_record, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `member_pay_expense_record` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, memberPayExpenseRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberPayExpenseRecordType, memberPayExpenseRecordMapping, append(wl, memberPayExpenseRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update member_pay_expense_record row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for member_pay_expense_record")
	}

	if !cached {
		memberPayExpenseRecordUpdateCacheMut.Lock()
		memberPayExpenseRecordUpdateCache[key] = cache
		memberPayExpenseRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q memberPayExpenseRecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for member_pay_expense_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for member_pay_expense_record")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberPayExpenseRecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPayExpenseRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `member_pay_expense_record` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPayExpenseRecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in memberPayExpenseRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all memberPayExpenseRecord")
	}
	return rowsAff, nil
}

var mySQLMemberPayExpenseRecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MemberPayExpenseRecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_pay_expense_record provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberPayExpenseRecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMemberPayExpenseRecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberPayExpenseRecordUpsertCacheMut.RLock()
	cache, cached := memberPayExpenseRecordUpsertCache[key]
	memberPayExpenseRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			memberPayExpenseRecordAllColumns,
			memberPayExpenseRecordColumnsWithDefault,
			memberPayExpenseRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			memberPayExpenseRecordAllColumns,
			memberPayExpenseRecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert member_pay_expense_record, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`member_pay_expense_record`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `member_pay_expense_record` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(memberPayExpenseRecordType, memberPayExpenseRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberPayExpenseRecordType, memberPayExpenseRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for member_pay_expense_record")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberPayExpenseRecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(memberPayExpenseRecordType, memberPayExpenseRecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for member_pay_expense_record")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_pay_expense_record")
	}

CacheNoHooks:
	if !cached {
		memberPayExpenseRecordUpsertCacheMut.Lock()
		memberPayExpenseRecordUpsertCache[key] = cache
		memberPayExpenseRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MemberPayExpenseRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MemberPayExpenseRecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MemberPayExpenseRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberPayExpenseRecordPrimaryKeyMapping)
	sql := "DELETE FROM `member_pay_expense_record` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from member_pay_expense_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for member_pay_expense_record")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memberPayExpenseRecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberPayExpenseRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member_pay_expense_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_pay_expense_record")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberPayExpenseRecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberPayExpenseRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPayExpenseRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `member_pay_expense_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPayExpenseRecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memberPayExpenseRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_pay_expense_record")
	}

	if len(memberPayExpenseRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MemberPayExpenseRecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMemberPayExpenseRecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberPayExpenseRecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberPayExpenseRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPayExpenseRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `member_pay_expense_record`.* FROM `member_pay_expense_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPayExpenseRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberPayExpenseRecordSlice")
	}

	*o = slice

	return nil
}

// MemberPayExpenseRecordExists checks if the MemberPayExpenseRecord row exists.
func MemberPayExpenseRecordExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `member_pay_expense_record` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if member_pay_expense_record exists")
	}

	return exists, nil
}
