// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"dumpapp_server/pkg/common/datatype"
	"dumpapp_server/pkg/common/enum"
	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InstallAppCdkeyOrder is an object representing the database table.
type InstallAppCdkeyOrder struct {
	ID        int64                               `boil:"id" json:"id,string" toml:"id" yaml:"id"`
	Contact   string                              `boil:"contact" json:"contact" toml:"contact" yaml:"contact"`
	Status    enum.MemberPayOrderStatus           `boil:"status" json:"status" toml:"status" yaml:"status"`
	Number    int64                               `boil:"number" json:"number" toml:"number" yaml:"number"`
	Amount    float64                             `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	BizExt    datatype.InstallAppCdkeyOrderBizExt `boil:"biz_ext" json:"biz_ext" toml:"biz_ext" yaml:"biz_ext"`
	CreatedAt time.Time                           `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time                           `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *installAppCdkeyOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L installAppCdkeyOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstallAppCdkeyOrderColumns = struct {
	ID        string
	Contact   string
	Status    string
	Number    string
	Amount    string
	BizExt    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Contact:   "contact",
	Status:    "status",
	Number:    "number",
	Amount:    "amount",
	BizExt:    "biz_ext",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperenum_MemberPayOrderStatus struct{ field string }

func (w whereHelperenum_MemberPayOrderStatus) EQ(x enum.MemberPayOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperenum_MemberPayOrderStatus) NEQ(x enum.MemberPayOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperenum_MemberPayOrderStatus) LT(x enum.MemberPayOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperenum_MemberPayOrderStatus) LTE(x enum.MemberPayOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperenum_MemberPayOrderStatus) GT(x enum.MemberPayOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperenum_MemberPayOrderStatus) GTE(x enum.MemberPayOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperdatatype_InstallAppCdkeyOrderBizExt struct{ field string }

func (w whereHelperdatatype_InstallAppCdkeyOrderBizExt) EQ(x datatype.InstallAppCdkeyOrderBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdatatype_InstallAppCdkeyOrderBizExt) NEQ(x datatype.InstallAppCdkeyOrderBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdatatype_InstallAppCdkeyOrderBizExt) LT(x datatype.InstallAppCdkeyOrderBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdatatype_InstallAppCdkeyOrderBizExt) LTE(x datatype.InstallAppCdkeyOrderBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdatatype_InstallAppCdkeyOrderBizExt) GT(x datatype.InstallAppCdkeyOrderBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdatatype_InstallAppCdkeyOrderBizExt) GTE(x datatype.InstallAppCdkeyOrderBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InstallAppCdkeyOrderWhere = struct {
	ID        whereHelperint64
	Contact   whereHelperstring
	Status    whereHelperenum_MemberPayOrderStatus
	Number    whereHelperint64
	Amount    whereHelperfloat64
	BizExt    whereHelperdatatype_InstallAppCdkeyOrderBizExt
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`install_app_cdkey_order`.`id`"},
	Contact:   whereHelperstring{field: "`install_app_cdkey_order`.`contact`"},
	Status:    whereHelperenum_MemberPayOrderStatus{field: "`install_app_cdkey_order`.`status`"},
	Number:    whereHelperint64{field: "`install_app_cdkey_order`.`number`"},
	Amount:    whereHelperfloat64{field: "`install_app_cdkey_order`.`amount`"},
	BizExt:    whereHelperdatatype_InstallAppCdkeyOrderBizExt{field: "`install_app_cdkey_order`.`biz_ext`"},
	CreatedAt: whereHelpertime_Time{field: "`install_app_cdkey_order`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`install_app_cdkey_order`.`updated_at`"},
}

// InstallAppCdkeyOrderRels is where relationship names are stored.
var InstallAppCdkeyOrderRels = struct {
}{}

// installAppCdkeyOrderR is where relationships are stored.
type installAppCdkeyOrderR struct {
}

// NewStruct creates a new relationship struct
func (*installAppCdkeyOrderR) NewStruct() *installAppCdkeyOrderR {
	return &installAppCdkeyOrderR{}
}

// installAppCdkeyOrderL is where Load methods for each relationship are stored.
type installAppCdkeyOrderL struct{}

var (
	installAppCdkeyOrderAllColumns            = []string{"id", "contact", "status", "number", "amount", "biz_ext", "created_at", "updated_at"}
	installAppCdkeyOrderColumnsWithoutDefault = []string{"contact", "status", "number", "amount", "biz_ext"}
	installAppCdkeyOrderColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	installAppCdkeyOrderPrimaryKeyColumns     = []string{"id"}
)

type (
	// InstallAppCdkeyOrderSlice is an alias for a slice of pointers to InstallAppCdkeyOrder.
	// This should almost always be used instead of []InstallAppCdkeyOrder.
	InstallAppCdkeyOrderSlice []*InstallAppCdkeyOrder
	// InstallAppCdkeyOrderHook is the signature for custom InstallAppCdkeyOrder hook methods
	InstallAppCdkeyOrderHook func(context.Context, boil.ContextExecutor, *InstallAppCdkeyOrder) error

	installAppCdkeyOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	installAppCdkeyOrderType                 = reflect.TypeOf(&InstallAppCdkeyOrder{})
	installAppCdkeyOrderMapping              = queries.MakeStructMapping(installAppCdkeyOrderType)
	installAppCdkeyOrderPrimaryKeyMapping, _ = queries.BindMapping(installAppCdkeyOrderType, installAppCdkeyOrderMapping, installAppCdkeyOrderPrimaryKeyColumns)
	installAppCdkeyOrderInsertCacheMut       sync.RWMutex
	installAppCdkeyOrderInsertCache          = make(map[string]insertCache)
	installAppCdkeyOrderUpdateCacheMut       sync.RWMutex
	installAppCdkeyOrderUpdateCache          = make(map[string]updateCache)
	installAppCdkeyOrderUpsertCacheMut       sync.RWMutex
	installAppCdkeyOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var installAppCdkeyOrderBeforeInsertHooks []InstallAppCdkeyOrderHook
var installAppCdkeyOrderBeforeUpdateHooks []InstallAppCdkeyOrderHook
var installAppCdkeyOrderBeforeDeleteHooks []InstallAppCdkeyOrderHook
var installAppCdkeyOrderBeforeUpsertHooks []InstallAppCdkeyOrderHook

var installAppCdkeyOrderAfterInsertHooks []InstallAppCdkeyOrderHook
var installAppCdkeyOrderAfterSelectHooks []InstallAppCdkeyOrderHook
var installAppCdkeyOrderAfterUpdateHooks []InstallAppCdkeyOrderHook
var installAppCdkeyOrderAfterDeleteHooks []InstallAppCdkeyOrderHook
var installAppCdkeyOrderAfterUpsertHooks []InstallAppCdkeyOrderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstallAppCdkeyOrder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstallAppCdkeyOrder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstallAppCdkeyOrder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstallAppCdkeyOrder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstallAppCdkeyOrder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstallAppCdkeyOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstallAppCdkeyOrder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstallAppCdkeyOrder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstallAppCdkeyOrder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installAppCdkeyOrderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstallAppCdkeyOrderHook registers your hook function for all future operations.
func AddInstallAppCdkeyOrderHook(hookPoint boil.HookPoint, installAppCdkeyOrderHook InstallAppCdkeyOrderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		installAppCdkeyOrderBeforeInsertHooks = append(installAppCdkeyOrderBeforeInsertHooks, installAppCdkeyOrderHook)
	case boil.BeforeUpdateHook:
		installAppCdkeyOrderBeforeUpdateHooks = append(installAppCdkeyOrderBeforeUpdateHooks, installAppCdkeyOrderHook)
	case boil.BeforeDeleteHook:
		installAppCdkeyOrderBeforeDeleteHooks = append(installAppCdkeyOrderBeforeDeleteHooks, installAppCdkeyOrderHook)
	case boil.BeforeUpsertHook:
		installAppCdkeyOrderBeforeUpsertHooks = append(installAppCdkeyOrderBeforeUpsertHooks, installAppCdkeyOrderHook)
	case boil.AfterInsertHook:
		installAppCdkeyOrderAfterInsertHooks = append(installAppCdkeyOrderAfterInsertHooks, installAppCdkeyOrderHook)
	case boil.AfterSelectHook:
		installAppCdkeyOrderAfterSelectHooks = append(installAppCdkeyOrderAfterSelectHooks, installAppCdkeyOrderHook)
	case boil.AfterUpdateHook:
		installAppCdkeyOrderAfterUpdateHooks = append(installAppCdkeyOrderAfterUpdateHooks, installAppCdkeyOrderHook)
	case boil.AfterDeleteHook:
		installAppCdkeyOrderAfterDeleteHooks = append(installAppCdkeyOrderAfterDeleteHooks, installAppCdkeyOrderHook)
	case boil.AfterUpsertHook:
		installAppCdkeyOrderAfterUpsertHooks = append(installAppCdkeyOrderAfterUpsertHooks, installAppCdkeyOrderHook)
	}
}

// One returns a single installAppCdkeyOrder record from the query.
func (q installAppCdkeyOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InstallAppCdkeyOrder, error) {
	o := &InstallAppCdkeyOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for install_app_cdkey_order")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InstallAppCdkeyOrder records from the query.
func (q installAppCdkeyOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstallAppCdkeyOrderSlice, error) {
	var o []*InstallAppCdkeyOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstallAppCdkeyOrder slice")
	}

	if len(installAppCdkeyOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InstallAppCdkeyOrder records in the query.
func (q installAppCdkeyOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count install_app_cdkey_order rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q installAppCdkeyOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if install_app_cdkey_order exists")
	}

	return count > 0, nil
}

// InstallAppCdkeyOrders retrieves all the records using an executor.
func InstallAppCdkeyOrders(mods ...qm.QueryMod) installAppCdkeyOrderQuery {
	mods = append(mods, qm.From("`install_app_cdkey_order`"))
	return installAppCdkeyOrderQuery{NewQuery(mods...)}
}

// FindInstallAppCdkeyOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstallAppCdkeyOrder(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*InstallAppCdkeyOrder, error) {
	installAppCdkeyOrderObj := &InstallAppCdkeyOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `install_app_cdkey_order` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, installAppCdkeyOrderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from install_app_cdkey_order")
	}

	if err = installAppCdkeyOrderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return installAppCdkeyOrderObj, err
	}

	return installAppCdkeyOrderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InstallAppCdkeyOrder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no install_app_cdkey_order provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(installAppCdkeyOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	installAppCdkeyOrderInsertCacheMut.RLock()
	cache, cached := installAppCdkeyOrderInsertCache[key]
	installAppCdkeyOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			installAppCdkeyOrderAllColumns,
			installAppCdkeyOrderColumnsWithDefault,
			installAppCdkeyOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(installAppCdkeyOrderType, installAppCdkeyOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(installAppCdkeyOrderType, installAppCdkeyOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `install_app_cdkey_order` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `install_app_cdkey_order` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `install_app_cdkey_order` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, installAppCdkeyOrderPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into install_app_cdkey_order")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == installAppCdkeyOrderMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for install_app_cdkey_order")
	}

CacheNoHooks:
	if !cached {
		installAppCdkeyOrderInsertCacheMut.Lock()
		installAppCdkeyOrderInsertCache[key] = cache
		installAppCdkeyOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InstallAppCdkeyOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InstallAppCdkeyOrder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	installAppCdkeyOrderUpdateCacheMut.RLock()
	cache, cached := installAppCdkeyOrderUpdateCache[key]
	installAppCdkeyOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			installAppCdkeyOrderAllColumns,
			installAppCdkeyOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update install_app_cdkey_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `install_app_cdkey_order` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, installAppCdkeyOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(installAppCdkeyOrderType, installAppCdkeyOrderMapping, append(wl, installAppCdkeyOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update install_app_cdkey_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for install_app_cdkey_order")
	}

	if !cached {
		installAppCdkeyOrderUpdateCacheMut.Lock()
		installAppCdkeyOrderUpdateCache[key] = cache
		installAppCdkeyOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q installAppCdkeyOrderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for install_app_cdkey_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for install_app_cdkey_order")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstallAppCdkeyOrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installAppCdkeyOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `install_app_cdkey_order` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, installAppCdkeyOrderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in installAppCdkeyOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all installAppCdkeyOrder")
	}
	return rowsAff, nil
}

var mySQLInstallAppCdkeyOrderUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InstallAppCdkeyOrder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no install_app_cdkey_order provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(installAppCdkeyOrderColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInstallAppCdkeyOrderUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	installAppCdkeyOrderUpsertCacheMut.RLock()
	cache, cached := installAppCdkeyOrderUpsertCache[key]
	installAppCdkeyOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			installAppCdkeyOrderAllColumns,
			installAppCdkeyOrderColumnsWithDefault,
			installAppCdkeyOrderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			installAppCdkeyOrderAllColumns,
			installAppCdkeyOrderPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert install_app_cdkey_order, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`install_app_cdkey_order`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `install_app_cdkey_order` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(installAppCdkeyOrderType, installAppCdkeyOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(installAppCdkeyOrderType, installAppCdkeyOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for install_app_cdkey_order")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == installAppCdkeyOrderMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(installAppCdkeyOrderType, installAppCdkeyOrderMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for install_app_cdkey_order")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for install_app_cdkey_order")
	}

CacheNoHooks:
	if !cached {
		installAppCdkeyOrderUpsertCacheMut.Lock()
		installAppCdkeyOrderUpsertCache[key] = cache
		installAppCdkeyOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InstallAppCdkeyOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstallAppCdkeyOrder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InstallAppCdkeyOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), installAppCdkeyOrderPrimaryKeyMapping)
	sql := "DELETE FROM `install_app_cdkey_order` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from install_app_cdkey_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for install_app_cdkey_order")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q installAppCdkeyOrderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no installAppCdkeyOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from install_app_cdkey_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for install_app_cdkey_order")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstallAppCdkeyOrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(installAppCdkeyOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installAppCdkeyOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `install_app_cdkey_order` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, installAppCdkeyOrderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from installAppCdkeyOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for install_app_cdkey_order")
	}

	if len(installAppCdkeyOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstallAppCdkeyOrder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstallAppCdkeyOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstallAppCdkeyOrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstallAppCdkeyOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installAppCdkeyOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `install_app_cdkey_order`.* FROM `install_app_cdkey_order` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, installAppCdkeyOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstallAppCdkeyOrderSlice")
	}

	*o = slice

	return nil
}

// InstallAppCdkeyOrderExists checks if the InstallAppCdkeyOrder row exists.
func InstallAppCdkeyOrderExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `install_app_cdkey_order` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if install_app_cdkey_order exists")
	}

	return exists, nil
}
