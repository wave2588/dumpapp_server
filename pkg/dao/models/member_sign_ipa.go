// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"dumpapp_server/pkg/common/datatype"
	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MemberSignIpa is an object representing the database table.
type MemberSignIpa struct {
	ID                int64                        `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExpenseID         string                       `boil:"expense_id" json:"expense_id" toml:"expense_id" yaml:"expense_id"`
	MemberID          int64                        `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	IsDelete          bool                         `boil:"is_delete" json:"is_delete" toml:"is_delete" yaml:"is_delete"`
	IpaFileToken      string                       `boil:"ipa_file_token" json:"ipa_file_token" toml:"ipa_file_token" yaml:"ipa_file_token"`
	IpaPlistFileToken string                       `boil:"ipa_plist_file_token" json:"ipa_plist_file_token" toml:"ipa_plist_file_token" yaml:"ipa_plist_file_token"`
	BizExt            datatype.MemberSignIpaBizExt `boil:"biz_ext" json:"biz_ext" toml:"biz_ext" yaml:"biz_ext"`
	// ????
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// ????
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *memberSignIpaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberSignIpaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberSignIpaColumns = struct {
	ID                string
	ExpenseID         string
	MemberID          string
	IsDelete          string
	IpaFileToken      string
	IpaPlistFileToken string
	BizExt            string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	ExpenseID:         "expense_id",
	MemberID:          "member_id",
	IsDelete:          "is_delete",
	IpaFileToken:      "ipa_file_token",
	IpaPlistFileToken: "ipa_plist_file_token",
	BizExt:            "biz_ext",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var MemberSignIpaTableColumns = struct {
	ID                string
	ExpenseID         string
	MemberID          string
	IsDelete          string
	IpaFileToken      string
	IpaPlistFileToken string
	BizExt            string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "member_sign_ipa.id",
	ExpenseID:         "member_sign_ipa.expense_id",
	MemberID:          "member_sign_ipa.member_id",
	IsDelete:          "member_sign_ipa.is_delete",
	IpaFileToken:      "member_sign_ipa.ipa_file_token",
	IpaPlistFileToken: "member_sign_ipa.ipa_plist_file_token",
	BizExt:            "member_sign_ipa.biz_ext",
	CreatedAt:         "member_sign_ipa.created_at",
	UpdatedAt:         "member_sign_ipa.updated_at",
}

// Generated where

type whereHelperdatatype_MemberSignIpaBizExt struct{ field string }

func (w whereHelperdatatype_MemberSignIpaBizExt) EQ(x datatype.MemberSignIpaBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdatatype_MemberSignIpaBizExt) NEQ(x datatype.MemberSignIpaBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdatatype_MemberSignIpaBizExt) LT(x datatype.MemberSignIpaBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdatatype_MemberSignIpaBizExt) LTE(x datatype.MemberSignIpaBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdatatype_MemberSignIpaBizExt) GT(x datatype.MemberSignIpaBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdatatype_MemberSignIpaBizExt) GTE(x datatype.MemberSignIpaBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MemberSignIpaWhere = struct {
	ID                whereHelperint64
	ExpenseID         whereHelperstring
	MemberID          whereHelperint64
	IsDelete          whereHelperbool
	IpaFileToken      whereHelperstring
	IpaPlistFileToken whereHelperstring
	BizExt            whereHelperdatatype_MemberSignIpaBizExt
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "`member_sign_ipa`.`id`"},
	ExpenseID:         whereHelperstring{field: "`member_sign_ipa`.`expense_id`"},
	MemberID:          whereHelperint64{field: "`member_sign_ipa`.`member_id`"},
	IsDelete:          whereHelperbool{field: "`member_sign_ipa`.`is_delete`"},
	IpaFileToken:      whereHelperstring{field: "`member_sign_ipa`.`ipa_file_token`"},
	IpaPlistFileToken: whereHelperstring{field: "`member_sign_ipa`.`ipa_plist_file_token`"},
	BizExt:            whereHelperdatatype_MemberSignIpaBizExt{field: "`member_sign_ipa`.`biz_ext`"},
	CreatedAt:         whereHelpertime_Time{field: "`member_sign_ipa`.`created_at`"},
	UpdatedAt:         whereHelpertime_Time{field: "`member_sign_ipa`.`updated_at`"},
}

// MemberSignIpaRels is where relationship names are stored.
var MemberSignIpaRels = struct {
}{}

// memberSignIpaR is where relationships are stored.
type memberSignIpaR struct {
}

// NewStruct creates a new relationship struct
func (*memberSignIpaR) NewStruct() *memberSignIpaR {
	return &memberSignIpaR{}
}

// memberSignIpaL is where Load methods for each relationship are stored.
type memberSignIpaL struct{}

var (
	memberSignIpaAllColumns            = []string{"id", "expense_id", "member_id", "is_delete", "ipa_file_token", "ipa_plist_file_token", "biz_ext", "created_at", "updated_at"}
	memberSignIpaColumnsWithoutDefault = []string{"expense_id", "member_id", "is_delete", "ipa_file_token", "ipa_plist_file_token", "biz_ext"}
	memberSignIpaColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	memberSignIpaPrimaryKeyColumns     = []string{"id"}
	memberSignIpaGeneratedColumns      = []string{}
)

type (
	// MemberSignIpaSlice is an alias for a slice of pointers to MemberSignIpa.
	// This should almost always be used instead of []MemberSignIpa.
	MemberSignIpaSlice []*MemberSignIpa
	// MemberSignIpaHook is the signature for custom MemberSignIpa hook methods
	MemberSignIpaHook func(context.Context, boil.ContextExecutor, *MemberSignIpa) error

	memberSignIpaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberSignIpaType                 = reflect.TypeOf(&MemberSignIpa{})
	memberSignIpaMapping              = queries.MakeStructMapping(memberSignIpaType)
	memberSignIpaPrimaryKeyMapping, _ = queries.BindMapping(memberSignIpaType, memberSignIpaMapping, memberSignIpaPrimaryKeyColumns)
	memberSignIpaInsertCacheMut       sync.RWMutex
	memberSignIpaInsertCache          = make(map[string]insertCache)
	memberSignIpaUpdateCacheMut       sync.RWMutex
	memberSignIpaUpdateCache          = make(map[string]updateCache)
	memberSignIpaUpsertCacheMut       sync.RWMutex
	memberSignIpaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberSignIpaAfterSelectHooks []MemberSignIpaHook

var memberSignIpaBeforeInsertHooks []MemberSignIpaHook
var memberSignIpaAfterInsertHooks []MemberSignIpaHook

var memberSignIpaBeforeUpdateHooks []MemberSignIpaHook
var memberSignIpaAfterUpdateHooks []MemberSignIpaHook

var memberSignIpaBeforeDeleteHooks []MemberSignIpaHook
var memberSignIpaAfterDeleteHooks []MemberSignIpaHook

var memberSignIpaBeforeUpsertHooks []MemberSignIpaHook
var memberSignIpaAfterUpsertHooks []MemberSignIpaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MemberSignIpa) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MemberSignIpa) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MemberSignIpa) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MemberSignIpa) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MemberSignIpa) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MemberSignIpa) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MemberSignIpa) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MemberSignIpa) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MemberSignIpa) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSignIpaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberSignIpaHook registers your hook function for all future operations.
func AddMemberSignIpaHook(hookPoint boil.HookPoint, memberSignIpaHook MemberSignIpaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memberSignIpaAfterSelectHooks = append(memberSignIpaAfterSelectHooks, memberSignIpaHook)
	case boil.BeforeInsertHook:
		memberSignIpaBeforeInsertHooks = append(memberSignIpaBeforeInsertHooks, memberSignIpaHook)
	case boil.AfterInsertHook:
		memberSignIpaAfterInsertHooks = append(memberSignIpaAfterInsertHooks, memberSignIpaHook)
	case boil.BeforeUpdateHook:
		memberSignIpaBeforeUpdateHooks = append(memberSignIpaBeforeUpdateHooks, memberSignIpaHook)
	case boil.AfterUpdateHook:
		memberSignIpaAfterUpdateHooks = append(memberSignIpaAfterUpdateHooks, memberSignIpaHook)
	case boil.BeforeDeleteHook:
		memberSignIpaBeforeDeleteHooks = append(memberSignIpaBeforeDeleteHooks, memberSignIpaHook)
	case boil.AfterDeleteHook:
		memberSignIpaAfterDeleteHooks = append(memberSignIpaAfterDeleteHooks, memberSignIpaHook)
	case boil.BeforeUpsertHook:
		memberSignIpaBeforeUpsertHooks = append(memberSignIpaBeforeUpsertHooks, memberSignIpaHook)
	case boil.AfterUpsertHook:
		memberSignIpaAfterUpsertHooks = append(memberSignIpaAfterUpsertHooks, memberSignIpaHook)
	}
}

// One returns a single memberSignIpa record from the query.
func (q memberSignIpaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MemberSignIpa, error) {
	o := &MemberSignIpa{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for member_sign_ipa")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MemberSignIpa records from the query.
func (q memberSignIpaQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberSignIpaSlice, error) {
	var o []*MemberSignIpa

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MemberSignIpa slice")
	}

	if len(memberSignIpaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MemberSignIpa records in the query.
func (q memberSignIpaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count member_sign_ipa rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memberSignIpaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if member_sign_ipa exists")
	}

	return count > 0, nil
}

// MemberSignIpas retrieves all the records using an executor.
func MemberSignIpas(mods ...qm.QueryMod) memberSignIpaQuery {
	mods = append(mods, qm.From("`member_sign_ipa`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`member_sign_ipa`.*"})
	}

	return memberSignIpaQuery{q}
}

// FindMemberSignIpa retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMemberSignIpa(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MemberSignIpa, error) {
	memberSignIpaObj := &MemberSignIpa{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `member_sign_ipa` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, memberSignIpaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from member_sign_ipa")
	}

	if err = memberSignIpaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memberSignIpaObj, err
	}

	return memberSignIpaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MemberSignIpa) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_sign_ipa provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberSignIpaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberSignIpaInsertCacheMut.RLock()
	cache, cached := memberSignIpaInsertCache[key]
	memberSignIpaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberSignIpaAllColumns,
			memberSignIpaColumnsWithDefault,
			memberSignIpaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberSignIpaType, memberSignIpaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberSignIpaType, memberSignIpaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `member_sign_ipa` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `member_sign_ipa` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `member_sign_ipa` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, memberSignIpaPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into member_sign_ipa")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberSignIpaMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_sign_ipa")
	}

CacheNoHooks:
	if !cached {
		memberSignIpaInsertCacheMut.Lock()
		memberSignIpaInsertCache[key] = cache
		memberSignIpaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MemberSignIpa.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MemberSignIpa) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberSignIpaUpdateCacheMut.RLock()
	cache, cached := memberSignIpaUpdateCache[key]
	memberSignIpaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberSignIpaAllColumns,
			memberSignIpaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update member_sign_ipa, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `member_sign_ipa` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, memberSignIpaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberSignIpaType, memberSignIpaMapping, append(wl, memberSignIpaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update member_sign_ipa row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for member_sign_ipa")
	}

	if !cached {
		memberSignIpaUpdateCacheMut.Lock()
		memberSignIpaUpdateCache[key] = cache
		memberSignIpaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q memberSignIpaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for member_sign_ipa")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for member_sign_ipa")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberSignIpaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberSignIpaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `member_sign_ipa` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberSignIpaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in memberSignIpa slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all memberSignIpa")
	}
	return rowsAff, nil
}

var mySQLMemberSignIpaUniqueColumns = []string{
	"id",
	"expense_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MemberSignIpa) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_sign_ipa provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberSignIpaColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMemberSignIpaUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberSignIpaUpsertCacheMut.RLock()
	cache, cached := memberSignIpaUpsertCache[key]
	memberSignIpaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			memberSignIpaAllColumns,
			memberSignIpaColumnsWithDefault,
			memberSignIpaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memberSignIpaAllColumns,
			memberSignIpaPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert member_sign_ipa, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`member_sign_ipa`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `member_sign_ipa` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(memberSignIpaType, memberSignIpaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberSignIpaType, memberSignIpaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for member_sign_ipa")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberSignIpaMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(memberSignIpaType, memberSignIpaMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for member_sign_ipa")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_sign_ipa")
	}

CacheNoHooks:
	if !cached {
		memberSignIpaUpsertCacheMut.Lock()
		memberSignIpaUpsertCache[key] = cache
		memberSignIpaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MemberSignIpa record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MemberSignIpa) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MemberSignIpa provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberSignIpaPrimaryKeyMapping)
	sql := "DELETE FROM `member_sign_ipa` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from member_sign_ipa")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for member_sign_ipa")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memberSignIpaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberSignIpaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member_sign_ipa")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_sign_ipa")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberSignIpaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberSignIpaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberSignIpaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `member_sign_ipa` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberSignIpaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memberSignIpa slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_sign_ipa")
	}

	if len(memberSignIpaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MemberSignIpa) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMemberSignIpa(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSignIpaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberSignIpaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberSignIpaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `member_sign_ipa`.* FROM `member_sign_ipa` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberSignIpaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberSignIpaSlice")
	}

	*o = slice

	return nil
}

// MemberSignIpaExists checks if the MemberSignIpa row exists.
func MemberSignIpaExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `member_sign_ipa` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if member_sign_ipa exists")
	}

	return exists, nil
}

// Exists checks if the MemberSignIpa row exists.
func (o *MemberSignIpa) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MemberSignIpaExists(ctx, exec, o.ID)
}
