// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"dumpapp_server/pkg/common/enum"
	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DispenseCountRecord is an object representing the database table.
type DispenseCountRecord struct {
	ID        int64                        `boil:"id" json:"id,string" toml:"id" yaml:"id"`
	MemberID  int64                        `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	Type      enum.DispenseCountRecordType `boil:"type" json:"type" toml:"type" yaml:"type"`
	Count     int64                        `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt time.Time                    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time                    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *dispenseCountRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dispenseCountRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DispenseCountRecordColumns = struct {
	ID        string
	MemberID  string
	Type      string
	Count     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	MemberID:  "member_id",
	Type:      "type",
	Count:     "count",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperenum_DispenseCountRecordType struct{ field string }

func (w whereHelperenum_DispenseCountRecordType) EQ(x enum.DispenseCountRecordType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperenum_DispenseCountRecordType) NEQ(x enum.DispenseCountRecordType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperenum_DispenseCountRecordType) LT(x enum.DispenseCountRecordType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperenum_DispenseCountRecordType) LTE(x enum.DispenseCountRecordType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperenum_DispenseCountRecordType) GT(x enum.DispenseCountRecordType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperenum_DispenseCountRecordType) GTE(x enum.DispenseCountRecordType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DispenseCountRecordWhere = struct {
	ID        whereHelperint64
	MemberID  whereHelperint64
	Type      whereHelperenum_DispenseCountRecordType
	Count     whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`dispense_count_record`.`id`"},
	MemberID:  whereHelperint64{field: "`dispense_count_record`.`member_id`"},
	Type:      whereHelperenum_DispenseCountRecordType{field: "`dispense_count_record`.`type`"},
	Count:     whereHelperint64{field: "`dispense_count_record`.`count`"},
	CreatedAt: whereHelpertime_Time{field: "`dispense_count_record`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`dispense_count_record`.`updated_at`"},
}

// DispenseCountRecordRels is where relationship names are stored.
var DispenseCountRecordRels = struct {
}{}

// dispenseCountRecordR is where relationships are stored.
type dispenseCountRecordR struct {
}

// NewStruct creates a new relationship struct
func (*dispenseCountRecordR) NewStruct() *dispenseCountRecordR {
	return &dispenseCountRecordR{}
}

// dispenseCountRecordL is where Load methods for each relationship are stored.
type dispenseCountRecordL struct{}

var (
	dispenseCountRecordAllColumns            = []string{"id", "member_id", "type", "count", "created_at", "updated_at"}
	dispenseCountRecordColumnsWithoutDefault = []string{"member_id", "type", "count"}
	dispenseCountRecordColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	dispenseCountRecordPrimaryKeyColumns     = []string{"id"}
)

type (
	// DispenseCountRecordSlice is an alias for a slice of pointers to DispenseCountRecord.
	// This should almost always be used instead of []DispenseCountRecord.
	DispenseCountRecordSlice []*DispenseCountRecord
	// DispenseCountRecordHook is the signature for custom DispenseCountRecord hook methods
	DispenseCountRecordHook func(context.Context, boil.ContextExecutor, *DispenseCountRecord) error

	dispenseCountRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dispenseCountRecordType                 = reflect.TypeOf(&DispenseCountRecord{})
	dispenseCountRecordMapping              = queries.MakeStructMapping(dispenseCountRecordType)
	dispenseCountRecordPrimaryKeyMapping, _ = queries.BindMapping(dispenseCountRecordType, dispenseCountRecordMapping, dispenseCountRecordPrimaryKeyColumns)
	dispenseCountRecordInsertCacheMut       sync.RWMutex
	dispenseCountRecordInsertCache          = make(map[string]insertCache)
	dispenseCountRecordUpdateCacheMut       sync.RWMutex
	dispenseCountRecordUpdateCache          = make(map[string]updateCache)
	dispenseCountRecordUpsertCacheMut       sync.RWMutex
	dispenseCountRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dispenseCountRecordBeforeInsertHooks []DispenseCountRecordHook
var dispenseCountRecordBeforeUpdateHooks []DispenseCountRecordHook
var dispenseCountRecordBeforeDeleteHooks []DispenseCountRecordHook
var dispenseCountRecordBeforeUpsertHooks []DispenseCountRecordHook

var dispenseCountRecordAfterInsertHooks []DispenseCountRecordHook
var dispenseCountRecordAfterSelectHooks []DispenseCountRecordHook
var dispenseCountRecordAfterUpdateHooks []DispenseCountRecordHook
var dispenseCountRecordAfterDeleteHooks []DispenseCountRecordHook
var dispenseCountRecordAfterUpsertHooks []DispenseCountRecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DispenseCountRecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DispenseCountRecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DispenseCountRecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DispenseCountRecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DispenseCountRecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DispenseCountRecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DispenseCountRecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DispenseCountRecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DispenseCountRecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dispenseCountRecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDispenseCountRecordHook registers your hook function for all future operations.
func AddDispenseCountRecordHook(hookPoint boil.HookPoint, dispenseCountRecordHook DispenseCountRecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dispenseCountRecordBeforeInsertHooks = append(dispenseCountRecordBeforeInsertHooks, dispenseCountRecordHook)
	case boil.BeforeUpdateHook:
		dispenseCountRecordBeforeUpdateHooks = append(dispenseCountRecordBeforeUpdateHooks, dispenseCountRecordHook)
	case boil.BeforeDeleteHook:
		dispenseCountRecordBeforeDeleteHooks = append(dispenseCountRecordBeforeDeleteHooks, dispenseCountRecordHook)
	case boil.BeforeUpsertHook:
		dispenseCountRecordBeforeUpsertHooks = append(dispenseCountRecordBeforeUpsertHooks, dispenseCountRecordHook)
	case boil.AfterInsertHook:
		dispenseCountRecordAfterInsertHooks = append(dispenseCountRecordAfterInsertHooks, dispenseCountRecordHook)
	case boil.AfterSelectHook:
		dispenseCountRecordAfterSelectHooks = append(dispenseCountRecordAfterSelectHooks, dispenseCountRecordHook)
	case boil.AfterUpdateHook:
		dispenseCountRecordAfterUpdateHooks = append(dispenseCountRecordAfterUpdateHooks, dispenseCountRecordHook)
	case boil.AfterDeleteHook:
		dispenseCountRecordAfterDeleteHooks = append(dispenseCountRecordAfterDeleteHooks, dispenseCountRecordHook)
	case boil.AfterUpsertHook:
		dispenseCountRecordAfterUpsertHooks = append(dispenseCountRecordAfterUpsertHooks, dispenseCountRecordHook)
	}
}

// One returns a single dispenseCountRecord record from the query.
func (q dispenseCountRecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DispenseCountRecord, error) {
	o := &DispenseCountRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dispense_count_record")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DispenseCountRecord records from the query.
func (q dispenseCountRecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (DispenseCountRecordSlice, error) {
	var o []*DispenseCountRecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DispenseCountRecord slice")
	}

	if len(dispenseCountRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DispenseCountRecord records in the query.
func (q dispenseCountRecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dispense_count_record rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dispenseCountRecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dispense_count_record exists")
	}

	return count > 0, nil
}

// DispenseCountRecords retrieves all the records using an executor.
func DispenseCountRecords(mods ...qm.QueryMod) dispenseCountRecordQuery {
	mods = append(mods, qm.From("`dispense_count_record`"))
	return dispenseCountRecordQuery{NewQuery(mods...)}
}

// FindDispenseCountRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDispenseCountRecord(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DispenseCountRecord, error) {
	dispenseCountRecordObj := &DispenseCountRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dispense_count_record` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dispenseCountRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dispense_count_record")
	}

	if err = dispenseCountRecordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dispenseCountRecordObj, err
	}

	return dispenseCountRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DispenseCountRecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dispense_count_record provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dispenseCountRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dispenseCountRecordInsertCacheMut.RLock()
	cache, cached := dispenseCountRecordInsertCache[key]
	dispenseCountRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dispenseCountRecordAllColumns,
			dispenseCountRecordColumnsWithDefault,
			dispenseCountRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dispenseCountRecordType, dispenseCountRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dispenseCountRecordType, dispenseCountRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dispense_count_record` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dispense_count_record` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dispense_count_record` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dispenseCountRecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dispense_count_record")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dispenseCountRecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for dispense_count_record")
	}

CacheNoHooks:
	if !cached {
		dispenseCountRecordInsertCacheMut.Lock()
		dispenseCountRecordInsertCache[key] = cache
		dispenseCountRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DispenseCountRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DispenseCountRecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dispenseCountRecordUpdateCacheMut.RLock()
	cache, cached := dispenseCountRecordUpdateCache[key]
	dispenseCountRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dispenseCountRecordAllColumns,
			dispenseCountRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dispense_count_record, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dispense_count_record` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dispenseCountRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dispenseCountRecordType, dispenseCountRecordMapping, append(wl, dispenseCountRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dispense_count_record row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dispense_count_record")
	}

	if !cached {
		dispenseCountRecordUpdateCacheMut.Lock()
		dispenseCountRecordUpdateCache[key] = cache
		dispenseCountRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dispenseCountRecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dispense_count_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dispense_count_record")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DispenseCountRecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dispenseCountRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dispense_count_record` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dispenseCountRecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dispenseCountRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dispenseCountRecord")
	}
	return rowsAff, nil
}

var mySQLDispenseCountRecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DispenseCountRecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dispense_count_record provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dispenseCountRecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDispenseCountRecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dispenseCountRecordUpsertCacheMut.RLock()
	cache, cached := dispenseCountRecordUpsertCache[key]
	dispenseCountRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dispenseCountRecordAllColumns,
			dispenseCountRecordColumnsWithDefault,
			dispenseCountRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dispenseCountRecordAllColumns,
			dispenseCountRecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert dispense_count_record, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`dispense_count_record`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dispense_count_record` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dispenseCountRecordType, dispenseCountRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dispenseCountRecordType, dispenseCountRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for dispense_count_record")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dispenseCountRecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dispenseCountRecordType, dispenseCountRecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for dispense_count_record")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for dispense_count_record")
	}

CacheNoHooks:
	if !cached {
		dispenseCountRecordUpsertCacheMut.Lock()
		dispenseCountRecordUpsertCache[key] = cache
		dispenseCountRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DispenseCountRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DispenseCountRecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DispenseCountRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dispenseCountRecordPrimaryKeyMapping)
	sql := "DELETE FROM `dispense_count_record` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dispense_count_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dispense_count_record")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dispenseCountRecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dispenseCountRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dispense_count_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dispense_count_record")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DispenseCountRecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dispenseCountRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dispenseCountRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dispense_count_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dispenseCountRecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dispenseCountRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dispense_count_record")
	}

	if len(dispenseCountRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DispenseCountRecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDispenseCountRecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DispenseCountRecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DispenseCountRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dispenseCountRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dispense_count_record`.* FROM `dispense_count_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dispenseCountRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DispenseCountRecordSlice")
	}

	*o = slice

	return nil
}

// DispenseCountRecordExists checks if the DispenseCountRecord row exists.
func DispenseCountRecordExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dispense_count_record` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dispense_count_record exists")
	}

	return exists, nil
}
