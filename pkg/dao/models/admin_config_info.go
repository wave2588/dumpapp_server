// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"dumpapp_server/pkg/common/datatype"
	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AdminConfigInfo is an object representing the database table.
type AdminConfigInfo struct {
	ID        int64                          `boil:"id" json:"id,string" toml:"id" yaml:"id"`
	BizExt    datatype.AdminConfigInfoBizExt `boil:"biz_ext" json:"biz_ext" toml:"biz_ext" yaml:"biz_ext"`
	CreatedAt time.Time                      `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time                      `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *adminConfigInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminConfigInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminConfigInfoColumns = struct {
	ID        string
	BizExt    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	BizExt:    "biz_ext",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var AdminConfigInfoTableColumns = struct {
	ID        string
	BizExt    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "admin_config_info.id",
	BizExt:    "admin_config_info.biz_ext",
	CreatedAt: "admin_config_info.created_at",
	UpdatedAt: "admin_config_info.updated_at",
}

// Generated where

type whereHelperdatatype_AdminConfigInfoBizExt struct{ field string }

func (w whereHelperdatatype_AdminConfigInfoBizExt) EQ(x datatype.AdminConfigInfoBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdatatype_AdminConfigInfoBizExt) NEQ(x datatype.AdminConfigInfoBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdatatype_AdminConfigInfoBizExt) LT(x datatype.AdminConfigInfoBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdatatype_AdminConfigInfoBizExt) LTE(x datatype.AdminConfigInfoBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdatatype_AdminConfigInfoBizExt) GT(x datatype.AdminConfigInfoBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdatatype_AdminConfigInfoBizExt) GTE(x datatype.AdminConfigInfoBizExt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AdminConfigInfoWhere = struct {
	ID        whereHelperint64
	BizExt    whereHelperdatatype_AdminConfigInfoBizExt
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`admin_config_info`.`id`"},
	BizExt:    whereHelperdatatype_AdminConfigInfoBizExt{field: "`admin_config_info`.`biz_ext`"},
	CreatedAt: whereHelpertime_Time{field: "`admin_config_info`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`admin_config_info`.`updated_at`"},
}

// AdminConfigInfoRels is where relationship names are stored.
var AdminConfigInfoRels = struct {
}{}

// adminConfigInfoR is where relationships are stored.
type adminConfigInfoR struct {
}

// NewStruct creates a new relationship struct
func (*adminConfigInfoR) NewStruct() *adminConfigInfoR {
	return &adminConfigInfoR{}
}

// adminConfigInfoL is where Load methods for each relationship are stored.
type adminConfigInfoL struct{}

var (
	adminConfigInfoAllColumns            = []string{"id", "biz_ext", "created_at", "updated_at"}
	adminConfigInfoColumnsWithoutDefault = []string{"biz_ext"}
	adminConfigInfoColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	adminConfigInfoPrimaryKeyColumns     = []string{"id"}
	adminConfigInfoGeneratedColumns      = []string{}
)

type (
	// AdminConfigInfoSlice is an alias for a slice of pointers to AdminConfigInfo.
	// This should almost always be used instead of []AdminConfigInfo.
	AdminConfigInfoSlice []*AdminConfigInfo
	// AdminConfigInfoHook is the signature for custom AdminConfigInfo hook methods
	AdminConfigInfoHook func(context.Context, boil.ContextExecutor, *AdminConfigInfo) error

	adminConfigInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminConfigInfoType                 = reflect.TypeOf(&AdminConfigInfo{})
	adminConfigInfoMapping              = queries.MakeStructMapping(adminConfigInfoType)
	adminConfigInfoPrimaryKeyMapping, _ = queries.BindMapping(adminConfigInfoType, adminConfigInfoMapping, adminConfigInfoPrimaryKeyColumns)
	adminConfigInfoInsertCacheMut       sync.RWMutex
	adminConfigInfoInsertCache          = make(map[string]insertCache)
	adminConfigInfoUpdateCacheMut       sync.RWMutex
	adminConfigInfoUpdateCache          = make(map[string]updateCache)
	adminConfigInfoUpsertCacheMut       sync.RWMutex
	adminConfigInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var adminConfigInfoAfterSelectHooks []AdminConfigInfoHook

var adminConfigInfoBeforeInsertHooks []AdminConfigInfoHook
var adminConfigInfoAfterInsertHooks []AdminConfigInfoHook

var adminConfigInfoBeforeUpdateHooks []AdminConfigInfoHook
var adminConfigInfoAfterUpdateHooks []AdminConfigInfoHook

var adminConfigInfoBeforeDeleteHooks []AdminConfigInfoHook
var adminConfigInfoAfterDeleteHooks []AdminConfigInfoHook

var adminConfigInfoBeforeUpsertHooks []AdminConfigInfoHook
var adminConfigInfoAfterUpsertHooks []AdminConfigInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdminConfigInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AdminConfigInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AdminConfigInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AdminConfigInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AdminConfigInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AdminConfigInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AdminConfigInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AdminConfigInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AdminConfigInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminConfigInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdminConfigInfoHook registers your hook function for all future operations.
func AddAdminConfigInfoHook(hookPoint boil.HookPoint, adminConfigInfoHook AdminConfigInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		adminConfigInfoAfterSelectHooks = append(adminConfigInfoAfterSelectHooks, adminConfigInfoHook)
	case boil.BeforeInsertHook:
		adminConfigInfoBeforeInsertHooks = append(adminConfigInfoBeforeInsertHooks, adminConfigInfoHook)
	case boil.AfterInsertHook:
		adminConfigInfoAfterInsertHooks = append(adminConfigInfoAfterInsertHooks, adminConfigInfoHook)
	case boil.BeforeUpdateHook:
		adminConfigInfoBeforeUpdateHooks = append(adminConfigInfoBeforeUpdateHooks, adminConfigInfoHook)
	case boil.AfterUpdateHook:
		adminConfigInfoAfterUpdateHooks = append(adminConfigInfoAfterUpdateHooks, adminConfigInfoHook)
	case boil.BeforeDeleteHook:
		adminConfigInfoBeforeDeleteHooks = append(adminConfigInfoBeforeDeleteHooks, adminConfigInfoHook)
	case boil.AfterDeleteHook:
		adminConfigInfoAfterDeleteHooks = append(adminConfigInfoAfterDeleteHooks, adminConfigInfoHook)
	case boil.BeforeUpsertHook:
		adminConfigInfoBeforeUpsertHooks = append(adminConfigInfoBeforeUpsertHooks, adminConfigInfoHook)
	case boil.AfterUpsertHook:
		adminConfigInfoAfterUpsertHooks = append(adminConfigInfoAfterUpsertHooks, adminConfigInfoHook)
	}
}

// One returns a single adminConfigInfo record from the query.
func (q adminConfigInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AdminConfigInfo, error) {
	o := &AdminConfigInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for admin_config_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AdminConfigInfo records from the query.
func (q adminConfigInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdminConfigInfoSlice, error) {
	var o []*AdminConfigInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdminConfigInfo slice")
	}

	if len(adminConfigInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AdminConfigInfo records in the query.
func (q adminConfigInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count admin_config_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q adminConfigInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if admin_config_info exists")
	}

	return count > 0, nil
}

// AdminConfigInfos retrieves all the records using an executor.
func AdminConfigInfos(mods ...qm.QueryMod) adminConfigInfoQuery {
	mods = append(mods, qm.From("`admin_config_info`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`admin_config_info`.*"})
	}

	return adminConfigInfoQuery{q}
}

// FindAdminConfigInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdminConfigInfo(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AdminConfigInfo, error) {
	adminConfigInfoObj := &AdminConfigInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `admin_config_info` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, adminConfigInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from admin_config_info")
	}

	if err = adminConfigInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return adminConfigInfoObj, err
	}

	return adminConfigInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AdminConfigInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_config_info provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminConfigInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	adminConfigInfoInsertCacheMut.RLock()
	cache, cached := adminConfigInfoInsertCache[key]
	adminConfigInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			adminConfigInfoAllColumns,
			adminConfigInfoColumnsWithDefault,
			adminConfigInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(adminConfigInfoType, adminConfigInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminConfigInfoType, adminConfigInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `admin_config_info` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `admin_config_info` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `admin_config_info` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, adminConfigInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into admin_config_info")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == adminConfigInfoMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for admin_config_info")
	}

CacheNoHooks:
	if !cached {
		adminConfigInfoInsertCacheMut.Lock()
		adminConfigInfoInsertCache[key] = cache
		adminConfigInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AdminConfigInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AdminConfigInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	adminConfigInfoUpdateCacheMut.RLock()
	cache, cached := adminConfigInfoUpdateCache[key]
	adminConfigInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			adminConfigInfoAllColumns,
			adminConfigInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update admin_config_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `admin_config_info` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, adminConfigInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminConfigInfoType, adminConfigInfoMapping, append(wl, adminConfigInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update admin_config_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for admin_config_info")
	}

	if !cached {
		adminConfigInfoUpdateCacheMut.Lock()
		adminConfigInfoUpdateCache[key] = cache
		adminConfigInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q adminConfigInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for admin_config_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for admin_config_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminConfigInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminConfigInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `admin_config_info` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, adminConfigInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in adminConfigInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all adminConfigInfo")
	}
	return rowsAff, nil
}

var mySQLAdminConfigInfoUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AdminConfigInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_config_info provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminConfigInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAdminConfigInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminConfigInfoUpsertCacheMut.RLock()
	cache, cached := adminConfigInfoUpsertCache[key]
	adminConfigInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			adminConfigInfoAllColumns,
			adminConfigInfoColumnsWithDefault,
			adminConfigInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			adminConfigInfoAllColumns,
			adminConfigInfoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert admin_config_info, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`admin_config_info`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `admin_config_info` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(adminConfigInfoType, adminConfigInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminConfigInfoType, adminConfigInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for admin_config_info")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == adminConfigInfoMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(adminConfigInfoType, adminConfigInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for admin_config_info")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for admin_config_info")
	}

CacheNoHooks:
	if !cached {
		adminConfigInfoUpsertCacheMut.Lock()
		adminConfigInfoUpsertCache[key] = cache
		adminConfigInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AdminConfigInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdminConfigInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminConfigInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminConfigInfoPrimaryKeyMapping)
	sql := "DELETE FROM `admin_config_info` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from admin_config_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for admin_config_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q adminConfigInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no adminConfigInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from admin_config_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_config_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminConfigInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(adminConfigInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminConfigInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `admin_config_info` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, adminConfigInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from adminConfigInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_config_info")
	}

	if len(adminConfigInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdminConfigInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAdminConfigInfo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminConfigInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdminConfigInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminConfigInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `admin_config_info`.* FROM `admin_config_info` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, adminConfigInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminConfigInfoSlice")
	}

	*o = slice

	return nil
}

// AdminConfigInfoExists checks if the AdminConfigInfo row exists.
func AdminConfigInfoExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `admin_config_info` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if admin_config_info exists")
	}

	return exists, nil
}

// Exists checks if the AdminConfigInfo row exists.
func (o *AdminConfigInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AdminConfigInfoExists(ctx, exec, o.ID)
}
